// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawPlayAgain_8d5cb1938d
ROOST_METHOD_SIG_HASH=DrawPlayAgain_0355656c5f

   ########## Test - Scenarios ##########  

Scenario 1: Verify Console Output

Details:
  TestName: VerifyConsoleOutputIsCorrect
  Description: This test checks whether the correct message is being output to the console when the DrawPlayAgain method is called.
Execution:
  Arrange: Set up a mechanism to capture console output.
  Act: Invoke the DrawPlayAgain method.
  Assert: Check if the captured console output matches "Do you like to play again? (Y/N)".
Validation:
  Clarify what the assertion aims to verify: The assertion verifies that the exact string "Do you like to play again? (Y/N)" is printed to the console.
  Elaborate on the significance of the test: Ensuring the correct message prompts the user accurately is crucial for user interaction, and verifying this maintains the integrity of the user interface in the application.

Scenario 2: Confirm No Return Value

Details:
  TestName: ConfirmMethodHasNoReturnValue
  Description: This test ensures that the DrawPlayAgain method does not return any value (i.e., it should be a void method).
Execution:
  Arrange: None needed.
  Act: Invoke the DrawPlayAgain method and capture any return value.
  Assert: Confirm that no value is returned from the method.
Validation:
  Clarify what the assertion aims to verify: The assertion checks that the method signature is correctly implemented as void, as expected.
  Elaborate on the significance of the test: Ensuring that the method adheres to its intended design by not returning a value is essential for maintaining the expected flow of control in the application.

Scenario 3: Confirm Method Execution Time Is Reasonable

Details:
  TestName: CheckMethodExecutionTime
  Description: This test verifies that the DrawPlayAgain method completes execution within a reasonable time frame, ensuring no unexpected delays during its execution.
Execution:
  Arrange: Start a stopwatch.
  Act: Invoke the DrawPlayAgain method.
  Assert: Stop the stopwatch and check the elapsed time is below a specified threshold (e.g., 100 milliseconds).
Validation:
  Clarify what the assertion aims to verify: The assertion ensures that the method executes quickly and efficiently without causing user-perceivable delays.
  Elaborate on the significance of the test: Fast execution of UI-related methods is crucial for maintaining a responsive and user-friendly application interface.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using System.IO;
using LunarDoggo.QuizGame.Visuals;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawPlayAgainTest
    {
        private StringWriter _stringWriter;
        private TextWriter _originalOutput;

        [SetUp]
        public void SetUp()
        {
            _originalOutput = Console.Out;
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            Console.SetOut(_originalOutput);
            _stringWriter.Dispose();
        }

        [Test]
        public void VerifyConsoleOutputIsCorrect()
        {
            // Arrange
            var visualizer = new ConsoleVisualizer();

            // Act
            visualizer.DrawPlayAgain();

            // Assert
            var output = _stringWriter.ToString().Trim();
            Assert.That(output, Is.EqualTo("Do you like to play again? (Y/N)"));
        }

        [Test]
        public void ConfirmMethodHasNoReturnValue()
        {
            // Arrange
            var visualizer = new ConsoleVisualizer();
            var method = visualizer.GetType().GetMethod("DrawPlayAgain");

            // Act & Assert
            Assert.That(method.ReturnType, Is.EqualTo(typeof(void)));
        }

        [Test]
        public void CheckMethodExecutionTime()
        {
            // Arrange
            var visualizer = new ConsoleVisualizer();
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();

            // Act
            visualizer.DrawPlayAgain();

            // Assert
            stopwatch.Stop();
            Assert.That(stopwatch.ElapsedMilliseconds, Is.LessThan(100));
        }
    }
}
