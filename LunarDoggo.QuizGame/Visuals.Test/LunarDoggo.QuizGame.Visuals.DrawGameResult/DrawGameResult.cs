// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawGameResult_5ea8725c74
ROOST_METHOD_SIG_HASH=DrawGameResult_127a94cb29

   ########## Test - Scenarios ##########  

Scenario 1: Valid Input Test

Details:
  TestName: DrawGameResultWithValidInput
  Description: This test checks the method's ability to correctly format and output the message when provided with valid totalQuestionCount and correctAnswersCount.
Execution:
  Arrange: Initialize totalQuestionCount and correctAnswersCount with valid positive integers.
  Act: Call DrawGameResult method with the arranged parameters.
  Assert: Verify that the Console.WriteLine method is called with the correct string formatted with provided parameters.
Validation:
  Clarify that the assertion verifies the output message is formatted correctly and contains the right values. This is significant as it confirms the method handles valid input correctly and maintains accurate information display.

Scenario 2: Zero Total Questions

Details:
  TestName: DrawGameResultWithZeroTotalQuestions
  Description: Tests the method's behavior when the total number of questions is zero, which is a boundary case for the input.
Execution:
  Arrange: Set totalQuestionCount to 0 and correctAnswersCount to 0.
  Act: Call the DrawGameResult method with these parameters.
  Assert: Check that the Console.WriteLine outputs "You got 0 out of 0 questions right. Continue with \"enter\"."
Validation:
  This test ensures that the method can handle cases where no questions were asked. It is crucial for scenarios where the game might end before any questions are presented.

Scenario 3: Correct Answers Exceed Total Questions

Details:
  TestName: DrawGameResultWithMoreCorrectAnswersThanTotal
  Description: This test checks how the method handles a scenario where the correctAnswersCount exceeds the totalQuestionCount, which should not typically happen.
Execution:
  Arrange: Set totalQuestionCount to 5 and correctAnswersCount to 10.
  Act: Invoke DrawGameResult with these parameters.
  Assert: Verify the output is logically incorrect but still formatted correctly, as the method currently does not handle this logic error.
Validation:
  This test is significant as it checks the robustness of the method against illogical input. It also highlights the need for additional validation within the method to handle such cases appropriately.

Scenario 4: Negative Inputs

Details:
  TestName: DrawGameResultWithNegativeInputs
  Description: Evaluates the method's response to negative values for totalQuestionCount and correctAnswersCount.
Execution:
  Arrange: Set totalQuestionCount and correctAnswersCount to -1.
  Act: Call DrawGameResult with these negative values.
  Assert: Verify that the output is still formatted correctly, albeit with negative numbers.
Validation:
  This test is important to ensure that the method does not crash with negative inputs and continues to display a message. It also suggests where input validation might be added to the method to restrict negative numbers.

Scenario 5: Large Numbers

Details:
  TestName: DrawGameResultWithLargeNumbers
  Description: Tests the method's performance and output correctness when handling very large integers.
Execution:
  Arrange: Set totalQuestionCount and correctAnswersCount to very large values (e.g., int.MaxValue).
  Act: Call DrawGameResult with these parameters.
  Assert: Ensure the output is correct and the application does not crash or behave unexpectedly.
Validation:
  This scenario tests the method's capability to handle large values without overflow errors or performance degradation, ensuring reliability under extreme conditions.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;
using System;
using System.IO;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawGameResultTest
    {
        private ConsoleVisualizer visualizer;
        private StringWriter consoleOutput;

        [SetUp]
        public void SetUp()
        {
            visualizer = new ConsoleVisualizer();
            consoleOutput = new StringWriter();
            Console.SetOut(consoleOutput);
        }

        [TearDown]
        public void TearDown()
        {
            consoleOutput.Dispose();
        }

        [Test]
        public void DrawGameResultWithValidInput()
        {
            visualizer.DrawGameResult(5, 3);
            string expectedOutput = "You got 3 out of 5 questions right. Continue with \"enter\".\r\n\r\n";
            Assert.That(consoleOutput.ToString(), Is.EqualTo(expectedOutput));
        }

        [Test]
        public void DrawGameResultWithZeroTotalQuestions()
        {
            visualizer.DrawGameResult(0, 0);
            string expectedOutput = "You got 0 out of 0 questions right. Continue with \"enter\".\r\n\r\n";
            Assert.That(consoleOutput.ToString(), Is.EqualTo(expectedOutput));
        }

        [Test]
        public void DrawGameResultWithMoreCorrectAnswersThanTotal()
        {
            visualizer.DrawGameResult(5, 10);
            string expectedOutput = "You got 10 out of 5 questions right. Continue with \"enter\".\r\n\r\n";
            Assert.That(consoleOutput.ToString(), Is.EqualTo(expectedOutput));
        }

        [Test]
        public void DrawGameResultWithNegativeInputs()
        {
            visualizer.DrawGameResult(-1, -1);
            string expectedOutput = "You got -1 out of -1 questions right. Continue with \"enter\".\r\n\r\n";
            Assert.That(consoleOutput.ToString(), Is.EqualTo(expectedOutput));
        }

        [Test]
        public void DrawGameResultWithLargeNumbers()
        {
            visualizer.DrawGameResult(int.MaxValue, int.MaxValue);
            string expectedOutput = $"You got {int.MaxValue} out of {int.MaxValue} questions right. Continue with \"enter\".\r\n\r\n";
            Assert.That(consoleOutput.ToString(), Is.EqualTo(expectedOutput));
        }
    }
}
