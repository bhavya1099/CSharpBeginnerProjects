// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawQuizQuestion_70db40a7b3
ROOST_METHOD_SIG_HASH=DrawQuizQuestion_1d352aaa00

   ########## Test - Scenarios ##########  

### Scenario 1: Valid Quiz Question with Highlighted Answer

Details:
  TestName: DrawQuizQuestionWithValidInputsAndHighlightedAnswer
  Description: This test verifies that the DrawQuizQuestion method correctly processes a valid QuizQuestion object and highlights the specified answer ID.

Execution:
  Arrange: Create a QuizQuestion object with multiple answers where one has the specified highlightedAnswerId.
  Act: Invoke the DrawQuizQuestion method with the created QuizQuestion object and the highlightedAnswerId.
  Assert: Check the console output to ensure that the question and answers are displayed correctly, and that the specified answer is highlighted.

Validation:
  The assertion verifies that the output contains the question text, each answer text, and highlights the correct answer. This test is significant as it ensures that the method can handle a typical use case where a question needs to be displayed with one answer highlighted, potentially indicating a user selection or focus.

### Scenario 2: Quiz Question with No Highlighted Answer

Details:
  TestName: DrawQuizQuestionWithNoHighlightedAnswer
  Description: This test checks the DrawQuizQuestion method when no answers are highlighted, ensuring it can handle cases where the highlightedAnswerId does not match any answer ID.

Execution:
  Arrange: Create a QuizQuestion object with multiple answers, none of which have an ID matching the highlightedAnswerId.
  Act: Invoke the DrawQuizQuestion method with this QuizQuestion object and a random non-matching highlightedAnswerId.
  Assert: Confirm that the console output shows all answers without any highlighting.

Validation:
  The assertion ensures that all answers are displayed without highlighting, validating that the method correctly handles the scenario where no answers should be highlighted. This is crucial for cases where no user interaction has yet occurred.

### Scenario 3: Quiz Question with Null as Question Object

Details:
  TestName: DrawQuizQuestionWithNullQuestionObject
  Description: This test ensures that the DrawQuizQuestion method can gracefully handle being passed a null QuizQuestion object without throwing unexpected exceptions.

Execution:
  Arrange: Set the QuizQuestion object to null.
  Act: Invoke the DrawQuizQuestion method with a null QuizQuestion object and any Guid as highlightedAnswerId.
  Assert: Catch any exceptions and verify that appropriate error handling or logging occurs.

Validation:
  This test checks for robust error handling in the method, ensuring that the application remains stable even if critical data is missing. This scenario is vital for maintaining application stability in the face of unexpected data issues.

### Scenario 4: Quiz Question with Empty Answers List

Details:
  TestName: DrawQuizQuestionWithEmptyAnswers
  Description: This test checks how the DrawQuizQuestion method behaves when the QuizQuestion object contains no answers.

Execution:
  Arrange: Create a QuizQuestion object with an empty list of answers.
  Act: Invoke the DrawQuizQuestion method with this object and any Guid as highlightedAnswerId.
  Assert: Verify that the console output correctly displays the question text but no answers.

Validation:
  This assertion confirms that the method can handle questions without answers, which might represent a configuration or data retrieval error. It's important for the method to handle such cases gracefully, ensuring the user interface remains informative and free from errors.

### Scenario 5: Highlighted Answer ID Does Not Exist in Answers

Details:
  TestName: DrawQuizQuestionWithNonexistentHighlightedAnswerId
  Description: This test ensures that the DrawQuizQuestion method correctly handles the scenario where the highlightedAnswerId does not match any existing answer ID in the question.

Execution:
  Arrange: Create a QuizQuestion object with a set of answers, none of which matches the highlightedAnswerId.
  Act: Invoke the DrawQuizQuestion method using this QuizQuestion and the non-matching highlightedAnswerId.
  Assert: Check that the console output displays all answers without any highlighting.

Validation:
  This test is crucial for verifying that the method does not incorrectly highlight an answer when the provided highlightedAnswerId does not exist, ensuring the accuracy and integrity of user interface displays.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;
using System;
using System.IO;
using System.Collections.Generic;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawQuizQuestionTest
    {
        private ConsoleVisualizer _visualizer;
        private StringWriter _stringWriter;

        [SetUp]
        public void SetUp()
        {
            _visualizer = new ConsoleVisualizer();
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            _stringWriter.Dispose();
        }

        [Test]
        public void DrawQuizQuestionWithValidInputsAndHighlightedAnswer()
        {
            var question = new QuizQuestion
            {
                Question = "What is the capital of France?",
                Answers = new List<QuizQuestionAnswer>
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Paris" },
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Berlin" }
                }
            };
            var highlightedAnswerId = question.Answers[0].Id;

            _visualizer.DrawQuizQuestion(question, highlightedAnswerId);

            var output = _stringWriter.ToString();
            Assert.That(output, Does.Contain("What is the capital of France?"));
            Assert.That(output, Does.Contain("Paris"));
            Assert.That(output, Does.Contain("Berlin"));
            Assert.That(output, Does.Contain("*Paris")); // Assuming * indicates highlighting
        }

        [Test]
        public void DrawQuizQuestionWithNoHighlightedAnswer()
        {
            var question = new QuizQuestion
            {
                Question = "What is the largest planet?",
                Answers = new List<QuizQuestionAnswer>
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Jupiter" },
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Saturn" }
                }
            };
            var highlightedAnswerId = Guid.NewGuid(); // Non-matching ID

            _visualizer.DrawQuizQuestion(question, highlightedAnswerId);

            var output = _stringWriter.ToString();
            Assert.That(output, Does.Not.Contain("*Jupiter"));
            Assert.That(output, Does.Not.Contain("*Saturn"));
        }

        [Test]
        public void DrawQuizQuestionWithNullQuestionObject()
        {
            QuizQuestion question = null;

            Assert.Throws<ArgumentNullException>(() => _visualizer.DrawQuizQuestion(question, Guid.NewGuid()));
        }

        [Test]
        public void DrawQuizQuestionWithEmptyAnswers()
        {
            var question = new QuizQuestion
            {
                Question = "What color is the sky?",
                Answers = new List<QuizQuestionAnswer>()
            };

            _visualizer.DrawQuizQuestion(question, Guid.NewGuid());

            var output = _stringWriter.ToString();
            Assert.That(output, Does.Contain("What color is the sky?"));
            Assert.That(output, Does.Not.Contain("*")); // No answers to highlight
        }

        [Test]
        public void DrawQuizQuestionWithNonexistentHighlightedAnswerId()
        {
            var question = new QuizQuestion
            {
                Question = "Who wrote Hamlet?",
                Answers = new List<QuizQuestionAnswer>
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Shakespeare" },
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Marlowe" }
                }
            };
            var highlightedAnswerId = Guid.NewGuid(); // Nonexistent ID

            _visualizer.DrawQuizQuestion(question, highlightedAnswerId);

            var output = _stringWriter.ToString();
            Assert.That(output, Does.Not.Contain("*Shakespeare"));
            Assert.That(output, Does.Not.Contain("*Marlowe"));
        }
    }
}
