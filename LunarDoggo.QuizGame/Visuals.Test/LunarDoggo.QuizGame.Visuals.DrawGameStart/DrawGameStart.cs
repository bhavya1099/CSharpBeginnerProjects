// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawGameStart_fbf218e565
ROOST_METHOD_SIG_HASH=DrawGameStart_977689871e

   ########## Test - Scenarios ##########  

Scenario 1: Display Message for Single Question

Details:
  TestName: DisplayMessageForSingleQuestion
  Description: This test checks if the method correctly formats the message when there is only one question to be loaded.
Execution:
  Arrange: Initialize the method with a totalQuestionCount of 1.
  Act: Call DrawGameStart with the parameter set to 1.
  Assert: Verify that the output message is "1 question was loaded, press \"enter\" to start the game."
Validation:
  The assertion verifies that the method applies singular grammar rules correctly when there's only one question. It's significant for clarity and user understanding in the game's context.

Scenario 2: Display Message for Multiple Questions

Details:
  TestName: DisplayMessageForMultipleQuestions
  Description: This test checks if the method correctly formats the message when there are multiple questions to be loaded.
Execution:
  Arrange: Initialize the method with a totalQuestionCount greater than 1, e.g., 5.
  Act: Call DrawGameStart with the parameter set to 5.
  Assert: Verify that the output message is "5 questions were loaded, press \"enter\" to start the game."
Validation:
  The assertion checks that the method uses plural grammar rules appropriately for multiple questions. This ensures the message is grammatically correct and clear for the user, enhancing the game experience.

Scenario 3: Display Message with Zero Questions

Details:
  TestName: DisplayMessageWithZeroQuestions
  Description: This test verifies the behavior of the method when no questions are available to be loaded.
Execution:
  Arrange: Initialize the method with a totalQuestionCount of 0.
  Act: Call DrawGameStart with the parameter set to 0.
  Assert: Verify that the output message is "0 questions were loaded, press \"enter\" to start the game."
Validation:
  This test ensures that the method handles the scenario of zero questions gracefully, still providing a clear and grammatically correct message. This scenario is crucial for handling cases where the game might not have any questions due to an error or misconfiguration.

Scenario 4: Verify Console Clearing Functionality

Details:
  TestName: VerifyConsoleClearingFunctionality
  Description: This test ensures that the Console.Clear() method is called before displaying the message.
Execution:
  Arrange: Mock the Console to verify interactions with it. Initialize the method with any totalQuestionCount.
  Act: Call DrawGameStart.
  Assert: Check that Console.Clear() was called.
Validation:
  Ensures that the game screen is cleared before a new message is displayed, which is important for maintaining a clean and user-friendly interface. This test confirms that the visual preparation for game start is handled correctly.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using LunarDoggo.QuizGame.Visuals;
using System.IO;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawGameStartTest
    {
        private StringWriter _stringWriter;
        private ConsoleVisualizer _consoleVisualizer;

        [SetUp]
        public void SetUp()
        {
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
            _consoleVisualizer = new ConsoleVisualizer();
        }

        [TearDown]
        public void TearDown()
        {
            _stringWriter.Dispose();
        }

        [Test]
        public void DisplayMessageForSingleQuestion()
        {
            _consoleVisualizer.DrawGameStart(1);
            var output = _stringWriter.ToString().Trim();
            Assert.That(output, Is.EqualTo("1 question was loaded, press \"enter\" to start the game."));
        }

        [Test]
        public void DisplayMessageForMultipleQuestions()
        {
            _consoleVisualizer.DrawGameStart(5);
            var output = _stringWriter.ToString().Trim();
            Assert.That(output, Is.EqualTo("5 questions were loaded, press \"enter\" to start the game."));
        }

        [Test]
        public void DisplayMessageWithZeroQuestions()
        {
            _consoleVisualizer.DrawGameStart(0);
            var output = _stringWriter.ToString().Trim();
            Assert.That(output, Is.EqualTo("0 questions were loaded, press \"enter\" to start the game."));
        }

        [Test]
        public void VerifyConsoleClearingFunctionality()
        {
            var originalOut = Console.Out;
            try
            {
                using (var consoleOutput = new StringWriter())
                {
                    Console.SetOut(consoleOutput);
                    _consoleVisualizer.DrawGameStart(3);
                    // Assert that the first thing that happens is Console.Clear(), which we simulate by checking if the output starts with an empty string
                    Assert.That(consoleOutput.ToString().StartsWith(""), Is.True);
                }
            }
            finally
            {
                Console.SetOut(originalOut);
            }
        }
    }
}
