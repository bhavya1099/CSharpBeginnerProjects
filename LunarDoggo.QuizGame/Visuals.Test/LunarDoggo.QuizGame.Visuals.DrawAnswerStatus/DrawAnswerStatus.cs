// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawAnswerStatus_7b85836452
ROOST_METHOD_SIG_HASH=DrawAnswerStatus_27e98f06a4

   ########## Test - Scenarios ##########  

Scenario 1: Correct Answer Provided

Details:
  TestName: TestCorrectAnswerProvided
  Description: This test checks the method's response when the correct answer is provided. It verifies that the output message correctly acknowledges the correct answer.
Execution:
  Arrange: Set up a boolean value representing a correct answer and a mock QuizQuestionAnswer object.
  Act: Invoke the DrawAnswerStatus method with the correct answer flag set to true.
  Assert: Use NUnit assertions to verify that the output message is "Your answer is correct. Continue with \"enter\"."
Validation:
  Clarify what the assertion aims to verify: The test ensures that when the answer is correct, the output message is appropriately positive and instructive.
  Elaborate on the significance of the test: This test is crucial to ensure that users receive positive reinforcement for correct answers, enhancing user experience and confidence in the quiz functionality.

Scenario 2: Incorrect Answer Provided

Details:
  TestName: TestIncorrectAnswerProvided
  Description: This test evaluates the method's behavior when an incorrect answer is provided. It checks whether the method correctly informs the user of the right answer.
Execution:
  Arrange: Set up a boolean value representing an incorrect answer and a mock QuizQuestionAnswer object with a predefined correct answer.
  Act: Invoke the DrawAnswerStatus method with the correct answer flag set to false and the mock correct answer.
  Assert: Use NUnit assertions to ensure that the output message includes the correct answer in the format "Your answer isn't correct. The correct answer is: \"{0}\". Continue with \"enter\".", replacing {0} with the correct answer.
Validation:
  Clarify what the assertion aims to verify: The assertion checks that the error message accurately informs the user of the correct answer.
  Elaborate on the significance of the test: This test is critical for educational purposes, ensuring that users learn the correct answer when they make a mistake, which is essential for learning platforms.

Scenario 3: Null CorrectAnswer Parameter Handling

Details:
  TestName: TestNullCorrectAnswerHandling
  Description: This test scenario checks how the method handles a null QuizQuestionAnswer object when the answer is incorrect.
Execution:
  Arrange: Set up a boolean value representing an incorrect answer and a null QuizQuestionAnswer object.
  Act: Invoke the DrawAnswerStatus method with the correct answer flag set to false and a null correct answer.
  Assert: Use NUnit assertions to check for a specific exception or to ensure that the method does not fail unexpectedly.
Validation:
  Clarify what the assertion aims to verify: The test checks the method's robustness and error handling capabilities when faced with null input parameters.
  Elaborate on the significance of the test: Ensuring that the application handles null inputs gracefully is crucial to prevent crashes and improve user experience under edge cases.

These scenarios collectively ensure that the method behaves correctly across typical usage, error conditions, and edge cases, thereby supporting reliable and user-friendly quiz functionality.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;
using System;
using System.IO;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawAnswerStatusTest
    {
        private ConsoleVisualizer visualizer;
        private StringWriter stringWriter;

        [SetUp]
        public void SetUp()
        {
            visualizer = new ConsoleVisualizer();
            stringWriter = new StringWriter();
            Console.SetOut(stringWriter);
        }

        [Test]
        public void TestCorrectAnswerProvided()
        {
            // Arrange
            QuizQuestionAnswer mockAnswer = new QuizQuestionAnswer { Answer = "Correct Answer" };
            bool correct = true;

            // Act
            visualizer.DrawAnswerStatus(correct, mockAnswer);

            // Assert
            string expectedOutput = "Your answer is correct. Continue with \"enter\".\r\n";
            Assert.That(stringWriter.ToString(), Is.EqualTo(expectedOutput));
        }

        [Test]
        public void TestIncorrectAnswerProvided()
        {
            // Arrange
            QuizQuestionAnswer mockAnswer = new QuizQuestionAnswer { Answer = "Correct Answer" };
            bool correct = false;

            // Act
            visualizer.DrawAnswerStatus(correct, mockAnswer);

            // Assert
            string expectedOutput = string.Format("Your answer isn't correct. The correct answer is: \"{0}\". Continue with \"enter\".\r\n", mockAnswer.Answer);
            Assert.That(stringWriter.ToString(), Is.EqualTo(expectedOutput));
        }

        [Test]
        public void TestNullCorrectAnswerHandling()
        {
            // Arrange
            bool correct = false;
            QuizQuestionAnswer nullAnswer = null;

            // Act
            TestDelegate testDelegate = () => visualizer.DrawAnswerStatus(correct, nullAnswer);

            // Assert
            Assert.That(testDelegate, Throws.TypeOf<NullReferenceException>());
        }

        [TearDown]
        public void TearDown()
        {
            stringWriter.Dispose();
        }
    }

    public class QuizQuestionAnswer
    {
        public string Answer { get; set; }
    }
}
