// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=AnswerQuestion_5b3553b6e7
ROOST_METHOD_SIG_HASH=AnswerQuestion_82d7e10041

   ########## Test - Scenarios ##########  

Scenario 1: Answering a Question When CurrentQuestion Is Set

Details:
  TestName: AnswerQuestionWithValidCurrentQuestion
  Description: This test verifies that the `AnswerQuestion` method processes a question correctly when `CurrentQuestion` is not null, including updating the `givenAnswers`, removing the question from `unansweredQuestions`, and setting `IsCurrentQuestionAnswered` and `ChosenAnswer`.
Execution:
  Arrange: Initialize a `QuizQuestion` object with a valid `highlightedAnswerIndex` and add it to `unansweredQuestions`.
  Act: Call the `AnswerQuestion` method.
  Assert: Check that the question is removed from `unansweredQuestions`, added to `givenAnswers`, and that `IsCurrentQuestionAnswered` is true and `ChosenAnswer` is set correctly.
Validation:
  This ensures that the method handles a typical use case correctly. It validates the method's ability to update internal state based on a user's answer, which is crucial for the game's functionality and correctness.

Scenario 2: Answering a Question When CurrentQuestion Is Null

Details:
  TestName: AnswerQuestionWithNullCurrentQuestion
  Description: This test checks the behavior of the `AnswerQuestion` method when `CurrentQuestion` is null, ensuring that no changes are made to the game state.
Execution:
  Arrange: Ensure that `CurrentQuestion` is null.
  Act: Call the `AnswerQuestion` method.
  Assert: Verify that `unansweredQuestions` and `givenAnswers` remain unchanged, and that `IsCurrentQuestionAnswered` and `ChosenAnswer` are not modified.
Validation:
  This test is important to confirm the method's robustness and that it safely handles cases where no question is currently active, preventing any unintended modifications to the game state.

Scenario 3: Answering a Question with Invalid Highlighted Answer Index

Details:
  TestName: AnswerQuestionWithInvalidHighlightedAnswerIndex
  Description: This test examines the scenario where the `highlightedAnswerIndex` is out of range for the answers array in `CurrentQuestion`.
Execution:
  Arrange: Set a `CurrentQuestion` with fewer answers than the `highlightedAnswerIndex`.
  Act: Call the `AnswerQuestion` method.
  Assert: Expect an exception to be thrown due to an index out of range.
Validation:
  Testing this edge case ensures that the method properly handles errors due to incorrect index values, which could be caused by UI inconsistencies or bugs. It's crucial for maintaining the application's stability and providing meaningful error messages to developers and users.

Scenario 4: Answering a Question Correctly

Details:
  TestName: AnswerQuestionCorrectly
  Description: Verifies that the method correctly identifies and records a correct answer.
Execution:
  Arrange: Set `CurrentQuestion` with a correct answer indicated by `highlightedAnswerIndex`.
  Act: Call the `AnswerQuestion` method.
  Assert: Check that the answer is recorded as correct in `givenAnswers`.
Validation:
  Ensures that the game accurately tracks correct answers, which is essential for scoring and feedback purposes within the game.

Scenario 5: Answering a Question Incorrectly

Details:
  TestName: AnswerQuestionIncorrectly
  Description: Checks that the method accurately identifies and records an incorrect answer.
Execution:
  Arrange: Set `CurrentQuestion` with an incorrect answer indicated by `highlightedAnswerIndex`.
  Act: Call the `AnswerQuestion` method.
  Assert: Verify that the answer is recorded as incorrect in `givenAnswers`.
Validation:
  This test confirms that the game correctly logs incorrect answers, which is vital for accurate scoring and user feedback.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame;
using System.Collections.Generic;
using System.Linq;
using System;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class AnswerQuestionTest
    {
        private GameState gameState;
        private QuizQuestion currentQuestion;
        private QuizQuestionAnswer correctAnswer;
        private QuizQuestionAnswer incorrectAnswer;

        [SetUp]
        public void SetUp()
        {
            correctAnswer = new QuizQuestionAnswer("Correct", true);
            incorrectAnswer = new QuizQuestionAnswer("Incorrect", false);
            currentQuestion = new QuizQuestion("Test Question?", new List<QuizQuestionAnswer> { correctAnswer, incorrectAnswer });
            gameState = new GameState(new List<QuizQuestion> { currentQuestion });
            gameState.CurrentQuestion = currentQuestion; // Adjust CurrentQuestion as needed
        }

        [Test]
        public void AnswerQuestionWithValidCurrentQuestion()
        {
            gameState.highlightedAnswerIndex = 0; // Correct answer index
            gameState.AnswerQuestion();

            Assert.That(gameState.unansweredQuestions.Contains(currentQuestion), Is.False);
            Assert.That(gameState.givenAnswers.ContainsKey(currentQuestion), Is.True);
            Assert.That(gameState.givenAnswers[currentQuestion], Is.True);
            Assert.That(gameState.IsCurrentQuestionAnswered, Is.True);
            Assert.That(gameState.ChosenAnswer, Is.EqualTo(correctAnswer));
        }

        [Test]
        public void AnswerQuestionWithNullCurrentQuestion()
        {
            gameState.CurrentQuestion = null;

            gameState.AnswerQuestion();

            Assert.That(gameState.unansweredQuestions.Count, Is.EqualTo(1));
            Assert.That(gameState.givenAnswers.Count, Is.EqualTo(0));
            Assert.That(gameState.IsCurrentQuestionAnswered, Is.False);
            Assert.That(gameState.ChosenAnswer, Is.Null);
        }

        [Test]
        public void AnswerQuestionWithInvalidHighlightedAnswerIndex()
        {
            gameState.highlightedAnswerIndex = 10; // Invalid index

            var ex = Assert.Throws<ArgumentOutOfRangeException>(() => gameState.AnswerQuestion());
            Assert.That(ex.Message, Does.Contain("Index was out of range"));
        }

        [Test]
        public void AnswerQuestionCorrectly()
        {
            gameState.highlightedAnswerIndex = 0; // Correct answer index
            gameState.AnswerQuestion();

            Assert.That(gameState.givenAnswers[currentQuestion], Is.True);
        }

        [Test]
        public void AnswerQuestionIncorrectly()
        {
            gameState.highlightedAnswerIndex = 1; // Incorrect answer index
            gameState.AnswerQuestion();

            Assert.That(gameState.givenAnswers[currentQuestion], Is.False);
        }
    }
}
