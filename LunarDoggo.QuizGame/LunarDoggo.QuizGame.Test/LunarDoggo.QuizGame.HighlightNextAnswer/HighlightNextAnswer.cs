// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=HighlightNextAnswer_43db10d727
ROOST_METHOD_SIG_HASH=HighlightNextAnswer_945da34ac1

   ########## Test - Scenarios ##########  

Scenario 1: Highlight Next Answer in Normal Conditions

Details:
  TestName: HighlightNextAnswerWithValidState
  Description: Tests that the `HighlightNextAnswer` method correctly increments the index of the highlighted answer under normal conditions.
Execution:
  Arrange: Initialize a QuizGame instance with multiple answers, ensuring the highlighted answer index is set properly.
  Act: Call the `HighlightNextAnswer` method.
  Assert: Check that the `highlightedAnswerIndex` is incremented by one.
Validation:
  The assertion verifies that the index is incremented, reflecting the method's purpose to move the highlight to the next answer. This test is significant as it ensures the basic functionality of navigating through answers in the quiz.

Scenario 2: Highlight Next Answer at Boundary Condition

Details:
  TestName: HighlightNextAnswerAtBoundary
  Description: Tests that the `HighlightNextAnswer` method correctly wraps around to the first answer if currently highlighting the last answer.
Execution:
  Arrange: Initialize a QuizGame instance with multiple answers where the `highlightedAnswerIndex` is set to the last index.
  Act: Call the `HighlightNextAnswer` method.
  Assert: Check that the `highlightedAnswerIndex` resets to zero.
Validation:
  The assertion checks that the index wraps around, which is crucial for cyclic navigation through answers, ensuring the user can continuously cycle through answers without interruption.

Scenario 3: Highlight Next Answer with Single Answer

Details:
  TestName: HighlightNextAnswerWithSingleAnswer
  Description: Tests that the `HighlightNextAnswer` method handles the scenario where there is only one answer correctly.
Execution:
  Arrange: Initialize a QuizGame instance with only one answer and set `highlightedAnswerIndex` to zero.
  Act: Call the `HighlightNextAnswer` method.
  Assert: Check that the `highlightedAnswerIndex` remains zero.
Validation:
  This test ensures that when only one answer is available, the highlight does not move, which is important for maintaining user experience consistency in quizzes with single-answer questions.

Scenario 4: Highlight Next Answer with No Current Question

Details:
  TestName: HighlightNextAnswerWithNoCurrentQuestion
  Description: Tests that the `HighlightNextAnswer` method behaves correctly when there is no current question set.
Execution:
  Arrange: Initialize a QuizGame instance without setting a current question.
  Act: Call the `HighlightNextAnswer` method.
  Assert: Check that no exceptions are thrown and the system remains stable.
Validation:
  This test checks the robustness of the method in scenarios where game data might not be fully initialized, ensuring the application's stability.

Scenario 5: Highlight Next Answer After Game End

Details:
  TestName: HighlightNextAnswerAfterGameEnd
  Description: Tests the behavior of `HighlightNextAnswer` when all questions have been answered and there are no unanswered questions left.
Execution:
  Arrange: Initialize a QuizGame instance where all questions are marked as answered.
  Act: Call the `HighlightNextAnswer` method.
  Assert: Verify that no changes occur to the `highlightedAnswerIndex` or that it handles the end-of-game logic appropriately.
Validation:
  This scenario ensures that the method does not cause any errors or unexpected behavior at the end of the game, which is important for providing a smooth game completion experience.


*/

// ********RoostGPT********
using System;
using System.Collections.Generic;
using NUnit.Framework;
using LunarDoggo.QuizGame;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class HighlightNextAnswerTest
    {
        private GameState _gameState;
        private List<QuizQuestion> _questions;

        [SetUp]
        public void SetUp()
        {
            _questions = new List<QuizQuestion>
            {
                new QuizQuestion("Question 1", new List<QuizQuestionAnswer> { new QuizQuestionAnswer("Answer 1"), new QuizQuestionAnswer("Answer 2") }),
                new QuizQuestion("Question 2", new List<QuizQuestionAnswer> { new QuizQuestionAnswer("Answer 1") }),
                new QuizQuestion("Question 3", new List<QuizQuestionAnswer> { new QuizQuestionAnswer("Answer 1"), new QuizQuestionAnswer("Answer 2"), new QuizQuestionAnswer("Answer 3") })
            };
            _gameState = new GameState(_questions);
        }

        [Test]
        public void HighlightNextAnswerWithValidState()
        {
            _gameState.CurrentQuestion = _questions[0];
            _gameState.HighlightNextAnswer();

            Assert.That(_gameState.HighlightedAnswerIndex, Is.EqualTo(1));
        }

        [Test]
        public void HighlightNextAnswerAtBoundary()
        {
            _gameState.CurrentQuestion = _questions[0];
            _gameState.HighlightedAnswerIndex = _questions[0].Answers.Count - 1;
            _gameState.HighlightNextAnswer();

            Assert.That(_gameState.HighlightedAnswerIndex, Is.EqualTo(0));
        }

        [Test]
        public void HighlightNextAnswerWithSingleAnswer()
        {
            _gameState.CurrentQuestion = _questions[1];
            _gameState.HighlightNextAnswer();

            Assert.That(_gameState.HighlightedAnswerIndex, Is.EqualTo(0));
        }

        [Test]
        public void HighlightNextAnswerWithNoCurrentQuestion()
        {
            _gameState.CurrentQuestion = null;
            Assert.DoesNotThrow(() => _gameState.HighlightNextAnswer());
        }

        [Test]
        public void HighlightNextAnswerAfterGameEnd()
        {
            _gameState.CurrentQuestion = _questions[2];
            _gameState.IsCurrentQuestionAnswered = true;
            int initialHighlightIndex = _gameState.HighlightedAnswerIndex;

            _gameState.HighlightNextAnswer();

            Assert.That(_gameState.HighlightedAnswerIndex, Is.EqualTo(initialHighlightIndex));
        }
    }
}
