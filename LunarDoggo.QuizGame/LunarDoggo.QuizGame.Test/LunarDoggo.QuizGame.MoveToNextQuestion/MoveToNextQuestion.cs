// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=MoveToNextQuestion_9343eae3d7
ROOST_METHOD_SIG_HASH=MoveToNextQuestion_2455d33844

   ########## Test - Scenarios ##########  

Scenario 1: MoveToNextQuestion With Unanswered Questions Available

Details:
  TestName: MoveToNextQuestionWithUnansweredQuestions
  Description: This test verifies that the MoveToNextQuestion method correctly updates the CurrentQuestion property when there are unanswered questions available.
Execution:
  Arrange: Create a list of unanswered questions and set the HasUnansweredQuestions property to true.
  Act: Invoke the MoveToNextQuestion method.
  Assert: Check if CurrentQuestion is updated to one of the questions from the unansweredQuestions list.
Validation:
  The assertion verifies that CurrentQuestion is not null and is one of the items in the unansweredQuestions list. This confirms that the method properly handles scenarios where unanswered questions are present and picks a random question as expected.

Scenario 2: MoveToNextQuestion With No Unanswered Questions

Details:
  TestName: MoveToNextQuestionWithNoUnansweredQuestions
  Description: This test checks that the MoveToNextQuestion method does not change the CurrentQuestion when there are no unanswered questions left.
Execution:
  Arrange: Ensure the unansweredQuestions list is empty and HasUnansweredQuestions property is false.
  Act: Store the current state of CurrentQuestion, then invoke MoveToNextQuestion.
  Assert: Assert that CurrentQuestion remains unchanged after the method call.
Validation:
  The assertion checks that CurrentQuestion remains the same, validating that the method correctly identifies when no questions are left to answer and avoids making changes to CurrentQuestion. This is crucial for preventing runtime errors or unintended behavior in the quiz flow.

Scenario 3: MoveToNextQuestion Resets QuestionAnswered State

Details:
  TestName: MoveToNextQuestionResetsQuestionAnsweredState
  Description: Test to ensure that invoking MoveToNextQuestion resets the IsCurrentQuestionAnswered flag to false.
Execution:
  Arrange: Set IsCurrentQuestionAnswered to true and ensure there are unanswered questions.
  Act: Call MoveToNextQuestion.
  Assert: Assert that IsCurrentQuestionAnswered is set to false.
Validation:
  This test confirms that each new question starts with a clean state for answering, which is essential for the application's logic to correctly track the user's progress and responses.

Scenario 4: MoveToNextQuestion Resets HighlightedAnswerIndex

Details:
  TestName: MoveToNextQuestionResetsHighlightedAnswerIndex
  Description: This test ensures that the highlightedAnswerIndex is reset to 0 when MoveToNextQuestion is called.
Execution:
  Arrange: Set highlightedAnswerIndex to a non-zero value and ensure there are unanswered questions.
  Act: Call MoveToNextQuestion.
  Assert: Check that highlightedAnswerIndex is reset to 0.
Validation:
  Resetting the highlightedAnswerIndex ensures that no residual highlighting affects the user interface when moving to a new question, maintaining a consistent user experience.

Scenario 5: MoveToNextQuestion Clears ChosenAnswer

Details:
  TestName: MoveToNextQuestionClearsChosenAnswer
  Description: Verify that the ChosenAnswer property is set to null after calling MoveToNextQuestion.
Execution:
  Arrange: Set ChosenAnswer to a non-null value and ensure there are unanswered questions.
  Act: Call MoveToNextQuestion.
  Assert: Assert that ChosenAnswer is null.
Validation:
  Clearing the ChosenAnswer ensures that the previous selections do not carry over to new questions, which is critical for accurate answer tracking and user response validation in the quiz game logic.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame;
using System.Collections.Generic;
using System.Linq;
using System;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class MoveToNextQuestionTest
    {
        private GameState _gameState;
        private List<QuizQuestion> _questions;

        [SetUp]
        public void SetUp()
        {
            _questions = new List<QuizQuestion>
            {
                new QuizQuestion("Question 1", new List<QuizQuestionAnswer> { new QuizQuestionAnswer("Answer 1.1"), new QuizQuestionAnswer("Answer 1.2") }),
                new QuizQuestion("Question 2", new List<QuizQuestionAnswer> { new QuizQuestionAnswer("Answer 2.1"), new QuizQuestionAnswer("Answer 2.2") }),
                new QuizQuestion("Question 3", new List<QuizQuestionAnswer> { new QuizQuestionAnswer("Answer 3.1"), new QuizQuestionAnswer("Answer 3.2") })
            };
            _gameState = new GameState(_questions);
        }

        [Test]
        public void MoveToNextQuestionWithUnansweredQuestions()
        {
            // Arrange
            // Act
            _gameState.MoveToNextQuestion();

            // Assert
            Assert.That(_gameState.CurrentQuestion, Is.Not.Null);
            Assert.That(_questions.Contains(_gameState.CurrentQuestion), Is.True);
        }

        [Test]
        public void MoveToNextQuestionWithNoUnansweredQuestions()
        {
            // Arrange
            while (_gameState.HasUnansweredQuestions)
            {
                _gameState.MoveToNextQuestion();
            }
            var expectedQuestion = _gameState.CurrentQuestion;

            // Act
            _gameState.MoveToNextQuestion();

            // Assert
            Assert.That(_gameState.CurrentQuestion, Is.EqualTo(expectedQuestion));
        }

        [Test]
        public void MoveToNextQuestionResetsQuestionAnsweredState()
        {
            // Arrange
            _gameState.MoveToNextQuestion();
            _gameState.ChosenAnswer = _gameState.CurrentQuestion.Answers[0];
            _gameState.IsCurrentQuestionAnswered = true;

            // Act
            _gameState.MoveToNextQuestion();

            // Assert
            Assert.That(_gameState.IsCurrentQuestionAnswered, Is.False);
        }

        [Test]
        public void MoveToNextQuestionResetsHighlightedAnswerIndex()
        {
            // Arrange
            _gameState.MoveToNextQuestion();
            _gameState.highlightedAnswerIndex = 1; // Assuming non-zero start

            // Act
            _gameState.MoveToNextQuestion();

            // Assert
            Assert.That(_gameState.highlightedAnswerIndex, Is.EqualTo(0));
        }

        [Test]
        public void MoveToNextQuestionClearsChosenAnswer()
        {
            // Arrange
            _gameState.MoveToNextQuestion();
            _gameState.ChosenAnswer = _gameState.CurrentQuestion.Answers[0];

            // Act
            _gameState.MoveToNextQuestion();

            // Assert
            Assert.That(_gameState.ChosenAnswer, Is.Null);
        }
    }
}
