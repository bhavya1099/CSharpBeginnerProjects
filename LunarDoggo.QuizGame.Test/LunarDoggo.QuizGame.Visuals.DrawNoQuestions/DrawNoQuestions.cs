// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawNoQuestions_93d159b36f
ROOST_METHOD_SIG_HASH=DrawNoQuestions_a3570fb089

   ########## Test-Scenarios ##########  

Scenario 1: Standard Console Output Verification

Details:
  TestName: DrawNoQuestionsOutputsCorrectMessage
  Description: This test aims to verify that the DrawNoQuestions method outputs the correct instructional message to the console when there are no questions loaded.
Execution:
  Arrange: Prepare a mock or substitute to capture console output.
  Act: Call the DrawNoQuestions method on an instance of ConsoleVisualizer.
  Assert: Check that the captured console output contains the exact expected message.
Validation:
  Clarify that the assertion checks for the presence and accuracy of the message about no questions being loaded and prompting for a game reload. This ensures that users are guided correctly when no quiz questions exist.
  Elaborate on the significance as it tests fundamental user guidance and interaction flow which is critical in scenarios where the game can't start due to missing data.

Scenario 2: Console WriteLine Call Count

Details:
  TestName: DrawNoQuestionsInvokesConsoleWriteLineOnce
  Description: This test ensures that the Console.WriteLine method is called exactly once when the DrawNoQuestions method is invoked.
Execution:
  Arrange: Substitute or mock the Console's WriteLine method to track how many times it's called.
  Act: Invoke the DrawNoQuestions method.
  Assert: Verify that WriteLine was called exactly once.
Validation:
  Clarify that the test checks for the method's efficiency in making console interactions by limiting it to a single WriteLine call, which is expected for outputting the entire message.
  Elaborate on the importance of this test in maintaining performance and minimizing console operations, which can be significant in a larger context or different environments.

Scenario 3: Correct Handling When Console is Unavailable

Details:
  TestName: DrawNoQuestionsHandlesConsoleExceptionsGracefully
  Description: Verify that the DrawNoQuestions method handles exceptions gracefully if the Console is unavailable or throws an error.
Execution:
  Arrange: Mock the Console.WriteLine method to throw an exception (e.g., an IOException).
  Act: Try to execute DrawNoQuestions and catch any exceptions.
  Assert: Check that no unhandled exceptions are thrown from the method.
Validation:
  Clarify that the test ensures the method is robust and does not fail unexpectedly under conditions where the Console output is inaccessible or faulty.
  This test is significant for ensuring the application's resilience and reliability in environments with restricted or special console behavior, maintaining user experience across diverse situations.

Scenario 4: Interaction with Console State

Details:
  TestName: DrawNoQuestionsDoesNotAlterConsoleStateUnnecessarily
  Description: Ensure that invoking DrawNoQuestions does not change the state of the Console, such as cursor position, unless specifically required.
Execution:
  Arrange: Record initial console state settings such as cursor visibility.
  Act: Invoke DrawNoQuestions.
  Assert: Confirm that the console state remains unchanged post-invocation.
Validation:
  This test verifies the method's cleanliness in not altering global/shared resources unnecessarily, which is important for applications where multiple components interact with the console.
  Important for preserving user settings and ensuring that method actions are scoped only to their necessary effects, enhancing application coherency and predictability.



*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;
using System.IO;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawNoQuestionsTest
    {
        private StringWriter consoleOutput;
        private ConsoleVisualizer visualizer;

        [SetUp]
        public void SetUp()
        {
            consoleOutput = new StringWriter();
            Console.SetOut(consoleOutput);
            visualizer = new ConsoleVisualizer();
        }

        [TearDown]
        public void TearDown()
        {
            consoleOutput.Dispose();
            Console.SetOut(new StreamWriter(Console.OpenStandardOutput()) { AutoFlush = true });
        }

        [Test]
        public void DrawNoQuestionsOutputsCorrectMessage()
        {
            visualizer.DrawNoQuestions();
            string expectedOutput = "No questions were loaded, please enter some questions into the json file in the applications folder.\r\nReload game? (Y/N)\r\n";
            Assert.That(consoleOutput.ToString(), Is.EqualTo(expectedOutput));
        }

        [Test]
        public void DrawNoQuestionsInvokesConsoleWriteLineOnce()
        {
            visualizer.DrawNoQuestions();
            string[] outputLines = consoleOutput.ToString().Trim().Split(new[] { Environment.NewLine }, StringSplitOptions.None);
            Assert.AreEqual(1, outputLines.Length);
        }

        [Test]
        public void DrawNoQuestionsHandlesConsoleExceptionsGracefully()
        {
            var originalOut = Console.Out;
            Console.SetOut(new StreamWriter(Stream.Null) { AutoFlush = true });
            Assert.DoesNotThrow(() => visualizer.DrawNoQuestions());
            Console.SetOut(originalOut);
        }

        [Test]
        public void DrawNoQuestionsDoesNotAlterConsoleStateUnnecessarily()
        {
            bool initialCursorVisible = Console.CursorVisible;
            int initialCursorTop = Console.CursorTop;
            int initialCursorLeft = Console.CursorLeft;

            visualizer.DrawNoQuestions();

            Assert.AreEqual(initialCursorVisible, Console.CursorVisible);
            Assert.AreEqual(initialCursorTop, Console.CursorTop);
            Assert.AreEqual(initialCursorLeft, Console.CursorLeft);
        }
    }
}
