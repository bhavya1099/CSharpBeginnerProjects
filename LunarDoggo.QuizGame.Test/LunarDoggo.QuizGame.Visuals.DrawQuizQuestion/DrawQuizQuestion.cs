// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawQuizQuestion_70db40a7b3
ROOST_METHOD_SIG_HASH=DrawQuizQuestion_1d352aaa00

   ########## Test-Scenarios ##########  

Scenario 1: Valid Input Test

Details:
  TestName: DrawQuizQuestionWithValidInput
  Description: This test is meant to check if the method correctly handles a valid QuizQuestion object and a correct Guid corresponding to a highlighted answer.
Execution:
  Arrange: Create an instance of QuizQuestion with valid answers and a Guid for highlighting one of the answers.
  Act: Invoke the DrawQuizQuestion method using the prepared QuizQuestion and Guid.
  Assert: Monitor the console output to ensure the correct question and answers format, with one highlighted answer, is displayed.
Validation:
  Validate that the console output matches the expected structure of the quiz formatting, with one answer correctly highlighted. The significance of this test is to confirm that the system can handle correct data and provide the user with appropriate visual feedback.

Scenario 2: Null Question Object

Details:
  TestName: DrawQuizQuestionWithNullQuestion
  Description: This test checks how the method handles being passed a null QuizQuestion object.
Execution:
  Arrange: Provide null as the QuizQuestion argument.
  Act: Invoke the DrawQuizQuestion method with a null question and a sample Guid.
  Assert: Check if the method handles the null input gracefully, possibly without throwing an exception.
Validation:
  Assert that no exception is thrown and the terminal remains clear, reaffirming the method's robustness in face of null input scenarios.

Scenario 3: Empty Answers List

Details:
  TestName: DrawQuizQuestionWithEmptyAnswers
  Description: This test is intended to check how the method handles a QuizQuestion object that contains an empty list of answers.
Execution:
  Arrange: Create a QuizQuestion object with an empty answers list.
  Act: Invoke the DrawQuizQuestion method using the QuizQuestion object and any valid Guid.
  Assert: Check if effective handling of an empty answers list occurs, such as displaying only the question without any answer choices.
Validation:
  Confirm the console output contains only the question with no answer formatting following it. This test ensures that edge cases where no answers exist are handled properly.

Scenario 4: Highlight Id Not Found

Details:
  TestName: DrawQuizQuestionWithNonExistentHighlightId
  Description: Check the method's response when provided a highlight Guid that does not correspond to any answer ID in the array.
Execution:
  Arrange: Create a QuizQuestion object with answers, none of which match the given highlighting Guid.
  Act: Invoke DrawQuizQuestion using this question and an unmatched Guid.
  Assert: No answer should be highlighted as the provided Guid does not match any answer IDs.
Validation:
  Examination ensures that answer highlighting falls back gracefully when the Highlight ID doesnâ€™t match, avoiding unintended behavior or crashes.

Scenario 5: Answers List Contains Null

Details:
  TestName: DrawQuizQuestionWithNullInAnswers
  Description: Test how the method deals with a list of answers that includes a null element.
Execution:
  Arrange: Create a QuizQuestion object that has at least one null element in the answers list.
  Act: Invoke DrawQuizQuestion passing this question and a valid highlighting Guid.
  Assert: Determine if the method can ignore or properly handle null answers without breaking.
Validation:
  Confirm that the system handles or skips null answers intelligently, maintaining the integrity and usability of the function, thus preventing runtime errors during visualization.

These scenarios aim to comprehensively assess the method's robustness across various typical and edge-case situations.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using System.IO;
using LunarDoggo.QuizGame.Visuals;
using Moq;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawQuizQuestionTest
    {
        private StringWriter consoleOutput;
        private ConsoleVisualizer consoleVisualizer;

        [SetUp]
        public void SetUp()
        {
            consoleOutput = new StringWriter();
            Console.SetOut(consoleOutput);
            consoleVisualizer = new ConsoleVisualizer();
        }

        [TearDown]
        public void TearDown()
        {
            Console.SetOut(Console.Out);
            consoleOutput.Dispose();
        }

        [Test]
        public void DrawQuizQuestionWithValidInput()
        {
            var question = new QuizQuestion
            {
                Question = "What is the capital of France?",
                Answers = new[]
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Paris" },
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "London" }
                }
            };
            var highlightId = question.Answers[0].Id;

            consoleVisualizer.DrawQuizQuestion(question, highlightId);

            string expectedOutput = string.Format("\n{0}\n\n (*) {1}\n ( ) {2}\n\n\n", question.Question, question.Answers[0].Answer, question.Answers[1].Answer);
            Assert.AreEqual(expectedOutput, consoleOutput.ToString());
        }

        [Test]
        public void DrawQuizQuestionWithNullQuestion()
        {
            Assert.Throws<ArgumentNullException>(() => consoleVisualizer.DrawQuizQuestion(null, Guid.NewGuid()));
        }

        [Test]
        public void DrawQuizQuestionWithEmptyAnswers()
        {
            var question = new QuizQuestion
            {
                Question = "What is the largest ocean?",
                Answers = Array.Empty<QuizQuestionAnswer>()
            };
            consoleVisualizer.DrawQuizQuestion(question, Guid.NewGuid());

            string expectedOutput = string.Format("\n{0}\n\n\n\n", question.Question);
            Assert.AreEqual(expectedOutput, consoleOutput.ToString());
        }

        [Test]
        public void DrawQuizQuestionWithNonExistentHighlightId()
        {
            var question = new QuizQuestion
            {
                Question = "What is the highest mountain?",
                Answers = new[]
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Everest" },
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "K2" }
                }
            };
            var nonExistentId = Guid.NewGuid();

            consoleVisualizer.DrawQuizQuestion(question, nonExistentId);

            string expectedOutput = string.Format("\n{0}\n\n ( ) {1}\n ( ) {2}\n\n\n", question.Question, question.Answers[0].Answer, question.Answers[1].Answer);
            Assert.AreEqual(expectedOutput, consoleOutput.ToString());
        }

        [Test]
        public void DrawQuizQuestionWithNullInAnswers()
        {
            var question = new QuizQuestion
            {
                Question = "Which element is a noble gas?",
                Answers = new[]
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Helium" },
                    null,
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Oxygen" }
                }
            };
            var highlightId = question.Answers[0].Id;

            consoleVisualizer.DrawQuizQuestion(question, highlightId);

            string expectedOutput = string.Format("\n{0}\n\n (*) {1}\n ( ) {2}\n\n\n", question.Question, question.Answers[0].Answer, question.Answers[2].Answer);
            Assert.AreEqual(expectedOutput, consoleOutput.ToString());
        }
    }
}
