// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawQuizQuestion_70db40a7b3
ROOST_METHOD_SIG_HASH=DrawQuizQuestion_1d352aaa00

   ########## Test-Scenarios ##########  

Scenario 1: Valid Input Test

Details:
  TestName: DrawQuizQuestionWithValidInput
  Description: This test is meant to check if the method correctly handles a valid QuizQuestion object and a correct Guid corresponding to a highlighted answer.
Execution:
  Arrange: Create an instance of QuizQuestion with valid answers and a Guid for highlighting one of the answers.
  Act: Invoke the DrawQuizQuestion method using the prepared QuizQuestion and Guid.
  Assert: Monitor the console output to ensure the correct question and answers format, with one highlighted answer, is displayed.
Validation:
  Validate that the console output contains the correct question text and that the expected answer is highlighted correctly. This ensures the method's ability to process standard input and present quiz questions with emphasis on a particular answer.

Scenario 2: Null Question Object

Details:
  TestName: DrawQuizQuestionWithNullQuestion
  Description: This scenario checks how the method deals with a null QuizQuestion object.
Execution:
  Arrange: Pass a null QuizQuestion object and any Guid.
  Act: Invoke the DrawQuizQuestion method.
  Assert: Check for any exceptions or error handling responses.
Validation:
  The assertion should verify whether the method safely handles null inputs without causing system crashes, confirming robust error handling or revealing areas needing improvement.

Scenario 3: Empty Answers List

Details:
  TestName: DrawQuizQuestionWithEmptyAnswers
  Description: This test determines how the method processes a QuizQuestion object with an empty list of answers.
Execution:
  Arrange: Create a QuizQuestion object with no answers included and pass a Guid.
  Act: Invoke the DrawQuizQuestion method with these parameters.
  Assert: Observe the console output to ensure it only displays the question text without any answers.
Validation:
  This test confirms that the method can elegantly handle scenarios where there are no answer choices provided, important for situations where data might be incomplete.

Scenario 4: No Highlighted Answer

Details:
  TestName: DrawQuizQuestionWithNoHighlightedAnswer
  Description: Tests the method behavior when no answer matches the supplied highlighted answer GUID.
Execution:
  Arrange: Provide a QuizQuestion object and a Guid that does not match any of the answer IDs.
  Act: Invoke the DrawQuizQuestion method.
  Assert: Observe the console output to verify that no answer is highlighted.
Validation:
  This scenario checks the methodâ€™s capability in ensuring that only correctly matching Guids result in a highlighted answer, thereby verifying the method's alignment with expected logic in UI feedback.

Scenario 5: Multiple Answers Highlight Test

Details:
  TestName: DrawQuizQuestionWithMultipleHighlightedAnswers
  Description: Ensures that only one answer can be highlighted even if a bug or mismatch causes multiple potential highlights.
Execution:
  Arrange: Create a QuizQuestion object where two answers have the same Guid as the highlighted answer.
  Act: Invoke the DrawQuizQuestion method using this question.
  Assert: Check that only the first matching answer is highlighted, not both.
Validation:
  This test is significant to confirm that the method adheres to the principle of highlighting a single answer per question, safeguarding against potential data integrity issues or input errors.


*/

// ********RoostGPT********
using System;
using System.IO;
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawQuizQuestionTest
    {
        private ConsoleVisualizer _visualizer;
        private StringWriter _stringWriter;
        private TextWriter _originalOutput;

        [SetUp]
        public void SetUp()
        {
            _visualizer = new ConsoleVisualizer();
            _originalOutput = Console.Out;
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            Console.SetOut(_originalOutput);
            _stringWriter.Dispose();
        }

        [Test, Category("valid")]
        public void DrawQuizQuestionWithValidInput()
        {
            var question = new QuizQuestion
            {
                Question = "What is the capital of France?",
                Answers = new[]
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Paris" },
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Berlin" }
                }
            };
            var highlitedAnswerId = question.Answers[0].Id;

            _visualizer.DrawQuizQuestion(question, highlitedAnswerId);

            string output = _stringWriter.ToString();
            Assert.IsTrue(output.Contains("Paris") && output.Contains("*"));
            Assert.IsFalse(output.Contains("* Berlin"));
        }

        [Test, Category("invalid")]
        public void DrawQuizQuestionWithNullQuestion()
        {
            Assert.Throws<ArgumentNullException>(() => _visualizer.DrawQuizQuestion(null, Guid.NewGuid()));
        }

        [Test, Category("boundary")]
        public void DrawQuizQuestionWithEmptyAnswers()
        {
            var question = new QuizQuestion
            {
                Question = "What is the largest planet?",
                Answers = new QuizQuestionAnswer[] { }
            };
            var highlitedAnswerId = Guid.NewGuid();

            _visualizer.DrawQuizQuestion(question, highlitedAnswerId);

            string output = _stringWriter.ToString();
            Assert.IsFalse(output.Contains("*"));
            Assert.IsTrue(output.Contains("What is the largest planet?"));
        }

        [Test, Category("valid")]
        public void DrawQuizQuestionWithNoHighlightedAnswer()
        {
            var question = new QuizQuestion
            {
                Question = "What is the smallest ocean?",
                Answers = new[]
                {
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Arctic Ocean" },
                    new QuizQuestionAnswer { Id = Guid.NewGuid(), Answer = "Indian Ocean" }
                }
            };
            var highlitedAnswerId = Guid.NewGuid();

            _visualizer.DrawQuizQuestion(question, highlitedAnswerId);

            string output = _stringWriter.ToString();
            Assert.IsFalse(output.Contains("* Arctic Ocean") || output.Contains("* Indian Ocean"));
        }

        [Test, Category("invalid")]
        public void DrawQuizQuestionWithMultipleHighlightedAnswers()
        {
            var duplicateId = Guid.NewGuid();
            var question = new QuizQuestion
            {
                Question = "Select correct options",
                Answers = new[]
                {
                    new QuizQuestionAnswer { Id = duplicateId, Answer = "Option A" },
                    new QuizQuestionAnswer { Id = duplicateId, Answer = "Option B" }
                }
            };

            _visualizer.DrawQuizQuestion(question, duplicateId);

            string output = _stringWriter.ToString();
            int count = output.Split('*').Length - 1;
            Assert.AreEqual(1, count); // Only the first matching answer is highlighted
        }
    }
}
