// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawGameResult_5ea8725c74
ROOST_METHOD_SIG_HASH=DrawGameResult_127a94cb29

   ########## Test-Scenarios ##########  

Scenario 1: Correct Answer Count Less Than Total Questions

Details:
  TestName: DrawGameResultWithCorrectAnswersLessThanTotal
  Description: This test checks the behavior of the DrawGameResult method when the number of correct answers is less than the total number of questions.
Execution:
  Arrange: Create variables to represent the correct answers count and total questions count where correctAnswersCount < totalQuestionCount, such as correctAnswersCount = 3 and totalQuestionCount = 5.
  Act: Invoke DrawGameResult with the arranged values.
  Assert: Confirm that the output indicates the correct ratio of correct to total questions.
Validation:
  The assertion checks that the output correctly displays "You got 3 out of 5 questions right. Continue with \"enter\".". This confirms the method accurately conveys performance when not all questions are answered correctly.

Scenario 2: Correct Answer Count Equal to Total Questions

Details:
  TestName: DrawGameResultWithAllAnswersCorrect
  Description: This test verifies that the DrawGameResult method displays correctly when all provided answers are correct.
Execution:
  Arrange: Set correctAnswersCount and totalQuestionCount to the same value, such as both equal to 10.
  Act: Call DrawGameResult using these values.
  Assert: Check that the output matches the expected success message.
Validation:
  Validates the output "You got 10 out of 10 questions right. Continue with \"enter\"." to ensure that the function handles full marks scenarios correctly, both encouraging the user and correctly summarizing the game result.

Scenario 3: Zero Correct Answers

Details:
  TestName: DrawGameResultWithZeroCorrectAnswers
  Description: This test assesses the method's output when no answers provided were correct.
Execution:
  Arrange: Set correctAnswersCount to 0 and totalQuestionCount to any positive number, e.g., 7.
  Act: Execute DrawGameResult with these parameters.
  Assert: Verify the output shows zero correct answers appropriately.
Validation:
  The assertion confirms the output "You got 0 out of 7 questions right. Continue with \"enter\".", ensuring that the function adequately reflects a scenario wherein the participant did not get any answers correct.

Scenario 4: Negative Correct Answer Count Handling

Details:
  TestName: DrawGameResultWithNegativeCorrectAnswers
  Description: Validates how the DrawGameResult method handles a scenario where the count of correct answers is mistakenly provided as a negative number.
Execution:
  Arrange: Set correctAnswersCount to a negative value, for instance, -3, and totalQuestionCount to a positive number like 5.
  Act: Run DrawGameResult method with these arranged values.
  Assert: Expect an output or method to handle this invalid input gracefully.
Validation:
  This test checks for method robustness in face of invalid input, ensuring application stability and informative error handling or output under erroneous conditions.

Scenario 5: Correct Answer Count Greater Than Total Questions

Details:
  TestName: DrawGameResultWithCorrectAnswersGreaterThanTotal
  Description: Checks the DrawGameResult method's resilience when the number of correct answers exceeds the total questions count.
Execution:
  Arrange: Define correctAnswersCount greater than totalQuestionCount, such as correctAnswersCount = 7, totalQuestionCount = 5.
  Act: Invoke DrawGameResult method with these parameters.
  Assert: Check for sensible output or error handling.
Validation:
  The test ensures the method's ability to deal with logically impossible situations such as having more correct answers than the total questions presented, highlighting necessary error messages or warnings.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using Moq;
using System.IO;
using LunarDoggo.QuizGame.Visuals;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawGameResultTest
    {
        private ConsoleVisualizer _visualizer;
        private StringWriter _stringWriter;

        [SetUp]
        public void Setup()
        {
            _visualizer = new ConsoleVisualizer();
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            _stringWriter.Dispose();
        }

        [Test, Category("valid")]
        public void DrawGameResultWithCorrectAnswersLessThanTotal()
        {
            _visualizer.DrawGameResult(5, 3);
            string expectedOutput = "You got 3 out of 5 question right. Continue with \"enter\".\n\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test, Category("valid")]
        public void DrawGameResultWithAllAnswersCorrect()
        {
            _visualizer.DrawGameResult(10, 10);
            string expectedOutput = "You got 10 out of 10 question right. Continue with \"enter\".\n\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test, Category("valid")]
        public void DrawGameResultWithZeroCorrectAnswers()
        {
            _visualizer.DrawGameResult(7, 0);
            string expectedOutput = "You got 0 out of 7 question right. Continue with \"enter\".\n\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test, Category("invalid")]
        public void DrawGameResultWithNegativeCorrectAnswers()
        {
            _visualizer.DrawGameResult(5, -3);
            string expectedOutput = "You got -3 out of 5 question right. Continue with \"enter\".\n\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test, Category("invalid")]
        public void DrawGameResultWithCorrectAnswersGreaterThanTotal()
        {
            _visualizer.DrawGameResult(5, 7);
            string expectedOutput = "You got 7 out of 5 question right. Continue with \"enter\".\n\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }
    }
}
