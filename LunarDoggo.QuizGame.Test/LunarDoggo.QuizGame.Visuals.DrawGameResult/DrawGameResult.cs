// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawGameResult_5ea8725c74
ROOST_METHOD_SIG_HASH=DrawGameResult_127a94cb29

   ########## Test-Scenarios ##########  

Scenario 1: Correct Answer Count Less Than Total Questions

Details:
  TestName: DrawGameResultWithCorrectAnswersLessThanTotal
  Description: This test checks the behavior of the DrawGameResult method when the number of correct answers is less than the total number of questions.
Execution:
  Arrange: Prepare variables int totalQuestionCount = 5, int correctAnswersCount = 3.
  Act: Call DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Check that the console output is "You got 3 out of 5 question right. Continue with \"enter\".\n".
Validation:
  This assertion verifies that the method handles scenarios where not all questions are answered correctly and formats the output string accordingly. 
  It's significant for ensuring user feedback is clear and accurate regarding their performance.

Scenario 2: Correct Answer Count Equals Total Questions

Details:
  TestName: DrawGameResultWithAllAnswersCorrect
  Description: This test evaluates if the DrawGameResult method correctly handles when all answers are correct.
Execution:
  Arrange: Prepare variables int totalQuestionCount = 5, int correctAnswersCount = 5.
  Act: Call DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Verify that the console output matches "You got 5 out of 5 question right. Continue with \"enter\".\n".
Validation:
  The assertion checks that the method correctly communicates when a user answers all questions correctly. 
  This is crucial for reinforcing positive user experiences and accurate feedback.

Scenario 3: Zero Questions

Details:
  TestName: DrawGameResultWithZeroQuestions
  Description: This scenario validates the method's behavior when there are zero questions to answer.
Execution:
  Arrange: Prepare variables int totalQuestionCount = 0, int correctAnswersCount = 0.
  Act: Call DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Confirm that the console output is "You got 0 out of 0 question right. Continue with \"enter\".\n".
Validation:
  Verifying this ensures that the method can handle edge cases where no questions exist, potentially due to an empty quiz, and still provide logical feedback.

Scenario 4: Negative Correct Answers

Details:
  TestName: DrawGameResultWithNegativeCorrectAnswers
  Description: Test to determine how the method reacts to a negative number of correct answers.
Execution:
  Arrange: Define variables int totalQuestionCount = 5, int correctAnswersCount = -1.
  Act: Call DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Needs a specific assertion to ensure error handling or unexpected behavior is managed.
Validation:
  This test will check if the method has safety checks against incorrect data (such as negative values) and how they are handled. It is important for maintaining data integrity and application stability.

Scenario 5: Correct Answers More Than Total Questions

Details:
  TestName: DrawGameResultWithCorrectAnswersGreaterThanTotal
  Description: Ensures that the method manages situations where the number of correct answers exceeds the total questions, likely due to a fault elsewhere in the application.
Execution:
  Arrange: Define variables int totalQuestionCount = 5, int correctAnswersCount = 6.
  Act: Call DrawGameResult(totalQuestionCount, correctAnswersCount).
  Assert: Likely needs specific asserts to handle this logical error effectively.
Validation:
  This test checks for robust error handling in case of data anomalies. It's crucial for catching and addressing bugs that may lead to data corruption or misleading user feedback.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using System.IO;
using LunarDoggo.QuizGame.Visuals;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawGameResultTest
    {
        private StringWriter _stringWriter;
        private ConsoleVisualizer _consoleVisualizer;

        [SetUp]
        public void Setup()
        {
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);
            _consoleVisualizer = new ConsoleVisualizer();
        }

        [Test]
        public void DrawGameResultWithCorrectAnswersLessThanTotal()
        {
            int totalQuestionCount = 5;
            int correctAnswersCount = 3;

            _consoleVisualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            string expectedOutput = "You got 3 out of 5 question right. Continue with \"enter\".\n\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void DrawGameResultWithAllAnswersCorrect()
        {
            int totalQuestionCount = 5;
            int correctAnswersCount = 5;

            _consoleVisualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            string expectedOutput = "You got 5 out of 5 question right. Continue with \"enter\".\n\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void DrawGameResultWithZeroQuestions()
        {
            int totalQuestionCount = 0;
            int correctAnswersCount = 0;

            _consoleVisualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            string expectedOutput = "You got 0 out of 0 question right. Continue with \"enter\".\n\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void DrawGameResultWithNegativeCorrectAnswers()
        {
            int totalQuestionCount = 5;
            int correctAnswersCount = -1;

            _consoleVisualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            string expectedOutput = "Invalid number of correct answers. Please try again.\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [Test]
        public void DrawGameResultWithCorrectAnswersGreaterThanTotal()
        {
            int totalQuestionCount = 5;
            int correctAnswersCount = 6;

            _consoleVisualizer.DrawGameResult(totalQuestionCount, correctAnswersCount);

            string expectedOutput = "Correct answers count cannot be greater than total questions. Please try again.\n";
            Assert.AreEqual(expectedOutput, _stringWriter.ToString());
        }

        [TearDown]
        public void Cleanup()
        {
            _stringWriter.Dispose();
            Console.SetOut(Console.Out);
        }
    }
}
