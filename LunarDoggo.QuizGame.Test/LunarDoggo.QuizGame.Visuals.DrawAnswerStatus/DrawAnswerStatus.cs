// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawAnswerStatus_7b85836452
ROOST_METHOD_SIG_HASH=DrawAnswerStatus_27e98f06a4

   ########## Test-Scenarios ##########  

### Scenario 1: Correct Answer Provided

Details:
  - TestName: TestDrawAnswerStatusWithCorrectAnswer
  - Description: Validate the output when the provided answer is correct. The method is expected to display a specific correct answer message.
Execution:
  - Arrange: Create an instance of ConsoleVisualizer and a QuizQuestionAnswer object, also set up a method to capture console output.
  - Act: Call `DrawAnswerStatus` method with `correct` set to true and a sample `correctAnswer` object.
  - Assert: Check that the captured console output includes the correct success message.
Validation:
  - Assert the expected string to ensure that the message "Your answer is correct. Continue with \"enter\"." is displayed. This test confirms the method handles correct answers properly, enforcing positive feedback to users.

### Scenario 2: Incorrect Answer Provided

Details:
  - TestName: TestDrawAnswerStatusWithIncorrectAnswer
  - Description: Test to ensure the method outputs the correct failure message including the right answer when an incorrect answer is given.
Execution:
  - Arrange: Instantiate ConsoleVisualizer and QuizQuestionAnswer object, setup a method to capture console output, provide the correct answer in `QuizQuestionAnswer`.
  - Act: Invoke `DrawAnswerStatus` with `correct` set to false and the predefined `correctAnswer`.
  - Assert: Validate that the console output contains the message indicating the correct answer.
Validation:
  - The assertion checks for the specific string including "Your answer isn't correct. The correct answer is: \"{expectedAnswer}\". Continue with \"enter\"." This confirms that the user is informed adequately about the right answer, which is crucial for educational purposes.

### Scenario 3: Correct Answer Boundary Check With Minimal Input

Details:
  - TestName: TestDrawAnswerStatusWithMinimalCorrectAnswerInput
  - Description: Examine the method's behavior with minimal acceptable inputs on a correct answer to test method robustness.
Execution:
  - Arrange: Instantiate ConsoleVisualizer, create a QuizQuestionAnswer object with the minimal possible valid data (e.g., an empty string for answer).
  - Act: Run `DrawAnswerStatus` method with `correct` true and this minimal `correctAnswer`.
  - Assert: Confirm that the output is a correct answer message.
Validation:
  - Assert output message to ensure even the minimal valid input results in a proper message. It tests the system's boundary handling and ensures it remains user-friendly and functional with diverse inputs.

### Scenario 4: Incorrect Answer Boundary Check With Minimal Input

Details:
  - TestName: TestDrawAnswerStatusWithMinimalIncorrectAnswerInput
  - Description: Verify the method's output when the incorrect answer and minimal inputs are used to ensure error messages are correctly handled.
Execution:
  - Arrange: Instantiate ConsoleVisualizer, create a QuizQuestionAnswer object with minimal data (e.g., empty string).
  - Act: Call `DrawAnswerStatus` with `correct` false and minimal `correctAnswer`.
  - Assert: Check console output for the inaccurately corrected answer message.
Validation:
  - Ensure right assertion string is matched to verify the app correctly informs users even when minimal input details are provided. This ensures resilience in user interactions, maintaining informative feedback regardless of input particulars. 

These scenarios cover basic functionality and boundary conditions to verify `DrawAnswerStatus` method behavior under both typical and extreme conditions.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using LunarDoggo.QuizGame.Visuals;
using System.IO;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawAnswerStatusTest
    {
        private StringWriter consoleOutput;

        [SetUp]
        public void Setup()
        {
            consoleOutput = new StringWriter();
            Console.SetOut(consoleOutput);
        }

        [TearDown]
        public void TearDown()
        {
            consoleOutput.Dispose();
        }

        [Test]
        public void TestDrawAnswerStatusWithCorrectAnswer()
        {
            // Arrange
            var visualizer = new ConsoleVisualizer();
            var correctAnswer = new QuizQuestionAnswer { Answer = "Correct Answer" };

            // Act
            visualizer.DrawAnswerStatus(true, correctAnswer);

            // Assert
            Assert.That(consoleOutput.ToString(), Does.Contain("Your answer is correct. Continue with \"enter\"."));
        }

        [Test]
        public void TestDrawAnswerStatusWithIncorrectAnswer()
        {
            // Arrange
            var visualizer = new ConsoleVisualizer();
            var correctAnswer = new QuizQuestionAnswer { Answer = "Right Answer" };

            // Act
            visualizer.DrawAnswerStatus(false, correctAnswer);

            // Assert
            Assert.That(consoleOutput.ToString(), Does.Contain("Your answer isn't correct. The correct answer is: \"Right Answer\". Continue with \"enter\"."));
        }

        [Test]
        public void TestDrawAnswerStatusWithMinimalCorrectAnswerInput()
        {
            // Arrange
            var visualizer = new ConsoleVisualizer();
            var correctAnswer = new QuizQuestionAnswer { Answer = "" }; // Minimal valid data

            // Act
            visualizer.DrawAnswerStatus(true, correctAnswer);

            // Assert
            Assert.That(consoleOutput.ToString(), Does.Contain("Your answer is correct. Continue with \"enter\"."));
        }

        [Test]
        public void TestDrawAnswerStatusWithMinimalIncorrectAnswerInput()
        {
            // Arrange
            var visualizer = new ConsoleVisualizer();
            var correctAnswer = new QuizQuestionAnswer { Answer = "" }; // Minimal data

            // Act
            visualizer.DrawAnswerStatus(false, correctAnswer);

            // Assert
            Assert.That(consoleOutput.ToString(), Does.Contain("Your answer isn't correct. The correct answer is: \"\". Continue with \"enter\"."));
        }
    }
}
