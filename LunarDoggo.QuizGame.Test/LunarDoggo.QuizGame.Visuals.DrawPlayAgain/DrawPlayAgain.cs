// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawPlayAgain_8d5cb1938d
ROOST_METHOD_SIG_HASH=DrawPlayAgain_0355656c5f

   ########## Test-Scenarios ##########  

Scenario 1: Basic Console Output Verification

Details:
  TestName: TestDrawPlayAgainOutput
  Description: This test ensures that the correct message prompts the user to play again when the DrawPlayAgain method is called.
Execution:
  Arrange: Initialize the dependencies necessary to capture or mock the console output.
  Act: Call the DrawPlayAgain method.
  Assert: Validate that the console output contains the expected string "Do you like to play again? (Y/N)".
Validation:
  Clarify that the assertion verifies the correctness and exactness of the message displayed in the console. This test is significant to confirm that users receive the correct prompt guiding them to make a decision about playing again, impacting user experience and game flow.

Scenario 2: Output Integrity on Sequential Calls

Details:
  TestName: TestDrawPlayAgainSequentialCallsOutputIntegrity
  Description: This test checks if multiple calls to DrawPlayAgain consistently print the correct message each time, ensuring output integrity over repetitive invocations.
Execution:
  Arrange: Setup to mock or capture console output and instantiate necessary dependencies.
  Act: Call the DrawPlayAgain method multiple times (e.g., three times).
  Assert: Check that each instance of the output matches the expected prompt without any modifications or truncation.
Validation:
  Clarify that this test ensures each prompt output is intact and consistent through multiple function calls. It underscores the method's reliability and stability, which is crucial during sessions where the user might decide multiple times about replaying, such as in a game loop.

Scenario 3: Examination of Console State Post-Invocation

Details:
  TestName: TestDrawPlayAgainConsoleState
  Description: Ensure that after calling DrawPlayAgain, the console's state remains consistent or unchanged where applicable (e.g., cursor position, color settings).
Execution:
  Arrange: Record console state settings (cursor position, color) before invocation.
  Act: Execute the DrawPlayAgain method.
  Assert: Compare pre-invocation and post-invocation console states to ensure no unintended changes.
Validation:
  The assertion verifies that the DrawPlayAgain method does not alter the console state beyond what is necessary for displaying its message. This scenario is significant for maintaining a consistent user interface, avoiding side effects that could affect other parts of the application where console display properties are critical.

These scenarios comprehensively test different aspects of the DrawPlayAgain method, from output correctness to interaction integrity, ensuring robustness and reliability in user interaction within the application's lifecycle.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using System.IO;
using LunarDoggo.QuizGame.Visuals;
using System.Text;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawPlayAgainTest
    {
        private StringWriter _stringWriter;
        private ConsoleVisualizer _visualizer;

        [SetUp]
        public void Setup()
        {
            _stringWriter = new StringWriter();
            Console.SetOut(_stringWriter);

            _visualizer = new ConsoleVisualizer();
        }

        [TearDown]
        public void Teardown()
        {
            _stringWriter.Dispose();
            Console.SetOut(new StreamWriter(Console.OpenStandardOutput()));
        }

        [Test]
        public void TestDrawPlayAgainOutput()
        {
            _visualizer.DrawPlayAgain();
            var output = _stringWriter.ToString().Trim();
            Assert.AreEqual("Do you like to play again? (Y/N)", output);
        }

        [Test]
        public void TestDrawPlayAgainSequentialCallsOutputIntegrity()
        {
            _visualizer.DrawPlayAgain();
            _visualizer.DrawPlayAgain();
            _visualizer.DrawPlayAgain();
            var output = _stringWriter.ToString().Trim();
            var expectedOutput = "Do you like to play again? (Y/N)"
                                 + Environment.NewLine
                                 + "Do you like to play again? (Y/N)"
                                 + Environment.NewLine
                                 + "Do you like to play again? (Y/N)";
            Assert.AreEqual(expectedOutput, output);
        }

        [Test]
        public void TestDrawPlayAgainConsoleState()
        {
            var initialCursorTop = Console.CursorTop;
            var initialCursorLeft = Console.CursorLeft;
            var initialForegroundColor = Console.ForegroundColor;
            var initialBackgroundColor = Console.BackgroundColor;

            _visualizer.DrawPlayAgain();

            Assert.AreEqual(initialCursorTop, Console.CursorTop);
            Assert.AreEqual(initialCursorLeft, Console.CursorLeft);
            Assert.AreEqual(initialForegroundColor, Console.ForegroundColor);
            Assert.AreEqual(initialBackgroundColor, Console.BackgroundColor);
        }
    }
}
