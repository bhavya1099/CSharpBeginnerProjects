// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=DrawPlayAgain_8d5cb1938d
ROOST_METHOD_SIG_HASH=DrawPlayAgain_0355656c5f

   ########## Test-Scenarios ##########  

Scenario 1: Basic Console Output Verification

Details:
  TestName: TestDrawPlayAgainOutput
  Description: This test checks if the correct message prompts "Do you like to play again? (Y/N)" are displayed in the console when calling the DrawPlayAgain method.
Execution:
  Arrange: Initialize the ConsoleVisualizer instance to capture console output.
  Act: Call the DrawPlayAgain method from the ConsoleVisualizer instance.
  Assert: Verify that the console output contains "Do you like to play again? (Y/N)".
Validation:
  This assertion verifies that the DrawPlayAgain method correctly prompts the user to decide if they want to play again. Ensuring this message is displayed correctly is crucial for user interaction in the quiz application flow.

Scenario 2: Console WriteLine Invocation Verification

Details:
  TestName: TestConsoleWriteLineInvocation
  Description: This test ensures that the Console.WriteLine method is being invoked exactly once with the correct string when the DrawPlayAgain method is executed.
Execution:
  Arrange: Mock the Console.WriteLine method.
  Act: Call the DrawPlayAgain method.
  Assert: Check that Console.WriteLine was called exactly once and verify the string argument passed to it.
Validation:
  Validates that the DrawPlayAgain method only outputs the required string a single time, preventing duplicate or missing prompts which could confuse the user. It also confirms proper integration with the System.Console API.

Scenario 3: No Return Value or Exception for Standard Execution

Details:
  TestName: TestDrawPlayAgainNoReturnNoException
  Description: This scenario tests that the DrawPlayAgain method does not return any value and does not throw any exceptions when executed under normal conditions.
Execution:
  Arrange: Create an instance of ConsoleVisualizer.
  Act: Execute DrawPlayAgain and capture any exceptions.
  Assert: Confirm that no value is returned and no exceptions are thrown.
Validation:
  This test ensures the stability and reliability of the DrawPlayAgain method under normal operational parameters, suggesting the method's resilience against runtime errors in a typical execution path.

These test scenarios collectively cover the functionality and expected behavior of the DrawPlayAgain method within the ConsoleVisualizer class, ensuring it correctly interacts with the console and handles its main responsibility of prompting the user reliably in the quiz game context. Each scenario targets a critical aspect of the method's operation, from output correctness to method stability, forming a comprehensive test suite for this simple yet crucial functionality.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using System.IO;

namespace LunarDoggo.QuizGame.Visuals.Test
{
    [TestFixture]
    public class DrawPlayAgainTest
    {
        private StringWriter stringWriter;
        private TextWriter originalOutput;

        [SetUp]
        public void SetUp()
        {
            originalOutput = Console.Out;
            stringWriter = new StringWriter();
            Console.SetOut(stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            Console.SetOut(originalOutput);
            stringWriter.Dispose();
        }

        [Test, Category("valid")]
        public void TestDrawPlayAgainOutput()
        {
            var consoleVisualizer = new ConsoleVisualizer();
            consoleVisualizer.DrawPlayAgain();
            var output = stringWriter.ToString();
            Assert.That(output, Does.Contain("Do you like to play again? (Y/N)"));
        }

        [Test, Category("valid")]
        public void TestConsoleWriteLineInvocation()
        {
            var consoleVisualizer = new ConsoleVisualizer();
            using (var consoleOutput = new StringWriter())
            {
                Console.SetOut(consoleOutput);
                consoleVisualizer.DrawPlayAgain();
                consoleOutput.Flush();
                var output = consoleOutput.ToString();
                Assert.AreEqual("Do you like to play again? (Y/N)\r\n", output);
            }
        }

        [Test, Category("valid")]
        public void TestDrawPlayAgainNoReturnNoException()
        {
            var consoleVisualizer = new ConsoleVisualizer();
            Exception caughtException = null;
            try
            {
                consoleVisualizer.DrawPlayAgain();
            }
            catch (Exception ex)
            {
                caughtException = ex;
            }
            Assert.IsNull(caughtException);
        }
    }
}
