// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=MoveToNextQuestion_927b31ccfb
ROOST_METHOD_SIG_HASH=MoveToNextQuestion_2455d33844

   ########## Test-Scenarios ##########  

## Test Scenarios for `MoveToNextQuestion` Method

**Scenario 1: No Unanswered Questions Available**

Details:
- TestName: TestMoveToNextQuestionWithNoUnansweredQuestions
- Description: Validates that the `MoveToNextQuestion` method does not modify any state when there are no unanswered questions available.

Execution:
- Arrange: Initialize `GameState` object with an empty set of questions.
- Act: Invoke `MoveToNextQuestion` method.
- Assert: Check if `CurrentQuestion` remains null and `IsCurrentQuestionAnswered` remains at its default value.

Validation:
- This test verifies that the method handles empty collections correctly and maintains state consistency, preventing any invalid state transitions.

---

**Scenario 2: Single Unanswered Question Available**

Details:
- TestName: TestMoveToNextQuestionWithSingleUnansweredQuestion
- Description: Checks if the method correctly transitions to the next question when there is exactly one unanswered question.

Execution:
- Arrange: Create a `GameState` instance with a single `QuizQuestion` item.
- Act: Invoke `MoveToNextQuestion`.
- Assert: Ensure that `CurrentQuestion` is the same as the provided question and that `IsCurrentQuestionAnswered` is set to false.

Validation:
- The test ensures the method can handle a minimum list size (of one), and correctly setups up for answering the question.

---

**Scenario 3: Multiple Unanswered Questions**

Details:
- TestName: TestMoveToNextQuestionWithMultipleUnansweredQuestions
- Description: Validates the randomness in question selection with multiple unanswered questions present.

Execution:
- Arrange: Initialize `GameState` with a mock list of multiple `QuizQuestion` objects.
- Act: Invoke `MoveToNextQuestion` multiple times, logging the selected `CurrentQuestion`.
- Assert: Check if different questions are generally selected across multiple invocations.

Validation:
- This test checks for pseudo-random behavior of question selection which is crucial for keeping quizzes unpredictable and engaging.

---

**Scenario 4: Valid State Transition**

Details:
- TestName: TestValidStateTransitionOnMoveToNextQuestion
- Description: Checks if the method maintains valid internal state transitions after moving to the next question.

Execution:
- Arrange: Set up `GameState` with several `QuizQuestion` items. Mock current question state.
- Act: Invoke `MoveToNextQuestion`.
- Assert: Ensure `highlightedAnswerIndex` resets to `0`, `ChosenAnswer` becomes `null`, and `IsCurrentQuestionAnswered` is `false`.

Validation:
- This scenario confirms that the method accurately resets or initializes properties related to the active question's state, ensuring the game's logical flow is unbroken.

---

**Scenario 5: Transition Occurs Only When Unanswered Questions Exist**

Details:
- TestName: TestTransitionOccursOnlyWithUnansweredQuestions
- Description: Ensures `MoveToNextQuestion` modifies the game state only when there are unanswered questions.

Execution:
- Arrange: Initialize `GameState` with unanswered questions, invoke `MoveToNextQuestion`, then manually set `HasUnansweredQuestions` to `false`.
- Act: Invoke `MoveToNextQuestion` again.
- Assert: Check that no state changes occur.

Validation:
- Validates conditional handling within the method, ensuring it behaves correctly based on the game's current state, thereby preventing any unintended behavior in edge cases.

These scenarios comprehensively test the method's behavior under various plausible conditions, ensuring robustness and stability in its operation.


*/

// ********RoostGPT********
using LunarDoggo.QuizGame;
using NUnit.Framework;
using System.Collections.Generic;
using Moq;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class MoveToNextQuestionTest
    {
        private GameState gameState;

        [SetUp]
        public void Setup()
        {
            var questions = new List<QuizQuestion>
            {
                new QuizQuestion
                {
                    Answers = new QuizQuestionAnswer[]
                    {
                        new QuizQuestionAnswer { Answer = "Answer 1", IsCorrect = true, Id = System.Guid.NewGuid() },
                        new QuizQuestionAnswer { Answer = "Answer 2", IsCorrect = false, Id = System.Guid.NewGuid() }
                    },
                    Question = "Question 1",
                    Id = System.Guid.NewGuid()
                },
                new QuizQuestion
                {
                    Answers = new QuizQuestionAnswer[]
                    {
                        new QuizQuestionAnswer { Answer = "Answer 1", IsCorrect = false, Id = System.Guid.NewGuid() },
                        new QuizQuestionAnswer { Answer = "Answer 2", IsCorrect = true, Id = System.Guid.NewGuid() }
                    },
                    Question = "Question 2",
                    Id = System.Guid.NewGuid()
                }
            };

            this.gameState = new GameState(questions);
        }

        [Test]
        public void TestMoveToNextQuestionWithNoUnansweredQuestions()
        {
            var emptyGameState = new GameState(new List<QuizQuestion>());

            emptyGameState.MoveToNextQuestion();

            Assert.IsNull(emptyGameState.CurrentQuestion);
            Assert.IsFalse(emptyGameState.IsCurrentQuestionAnswered);
        }

        [Test]
        public void TestMoveToNextQuestionWithSingleUnansweredQuestion()
        {
            var singleQuestionGameState = new GameState(new List<QuizQuestion> 
            { 
                new QuizQuestion 
                {
                    Answers = new QuizQuestionAnswer[]
                    {
                        new QuizQuestionAnswer { Answer = "Answer 1", IsCorrect = true, Id = System.Guid.NewGuid() }
                    },
                    Question = "Single Question",
                    Id = System.Guid.NewGuid()
                } 
            });

            singleQuestionGameState.MoveToNextQuestion();

            Assert.IsNotNull(singleQuestionGameState.CurrentQuestion);
            Assert.IsFalse(singleQuestionGameState.IsCurrentQuestionAnswered);
        }

        [Test]
        public void TestMoveToNextQuestionWithMultipleUnansweredQuestions()
        {
            var usedQuestions = new HashSet<QuizQuestion>();

            for (int i = 0; i < 10; i++) // Invoke multiple times to check for randomness
            {
                gameState.MoveToNextQuestion();
                Assert.IsNotNull(gameState.CurrentQuestion);
                usedQuestions.Add(gameState.CurrentQuestion);
            }

            Assert.IsTrue(usedQuestions.Count > 1); // Check if generally more than one distinct question is selected
        }

        [Test]
        public void TestValidStateTransitionOnMoveToNextQuestion()
        {
            gameState.MoveToNextQuestion();

            Assert.IsNotNull(gameState.CurrentQuestion);
            Assert.AreNotEqual(0, gameState.HighlightedAnswer.Id);
            Assert.IsNull(gameState.ChosenAnswer);
            Assert.IsFalse(gameState.IsCurrentQuestionAnswered);
        }

        [Test]
        public void TestTransitionOccursOnlyWithUnansweredQuestions()
        {
            gameState.MoveToNextQuestion(); // Move to ensure current question and state is not null
            while (gameState.HasUnansweredQuestions) // Ensure all questions are answered
            {
                foreach (QuizQuestionAnswer answer in gameState.CurrentQuestion.Answers)
                {
                    if (answer.IsCorrect)
                    {
                        gameState.AnswerQuestion(answer.Id);
                        break;
                    }
                }
            }

            var currentQuestion = gameState.CurrentQuestion;
            gameState.MoveToNextQuestion();

            Assert.AreSame(currentQuestion, gameState.CurrentQuestion); // Ensure it doesn't change without unanswered questions
        }
    }
}
