// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=HighlightPreviousAnswer_e504497786
ROOST_METHOD_SIG_HASH=HighlightPreviousAnswer_a80232d808

   ########## Test-Scenarios ##########  

Scenario 1: HighlightPreviousAnswer with multiple answers in the current question

Details:
  TestName: HighlightPreviousAnswerWithMultipleAnswers
  Description: This test ensures that when a question has multiple answers, invoking HighlightPreviousAnswer correctly decrements the highlighted answer by one position cyclically.
Execution:
  Arrange: Set up a GameState with a QuizQuestion containing multiple answers and initially highlight the first answer.
  Act: Invoke HighlightPreviousAnswer method.
  Assert: Check if the highlighted answer index correctly wraps to the last answer.
Validation:
  Validate the behavior of cycling back to the last index when the first answer is highlighted, representing the previous answer navigational functionality. This test is significant because it verifies the expected cyclic behavior of navigation in the quiz context.

Scenario 2: HighlightPreviousAnswer at the start of a list

Details:
  TestName: HighlightPreviousAnswerAtStartOfList
  Description: Checks if calling HighlightPreviousAnswer correctly navigates to the last answer when currently highlighted answer is the first in the list.
Execution:
  Arrange: Set up a GameState with the highlighted answer at the first position.
  Act: Invoke HighlightPreviousAnswer method.
  Assert: Check if the highlighted answer now points to the last item in the answer list.
Validation:
  Asserts that the index wraps around to the last if invoked from the first position, crucial for ensuring users can navigate backward through all options cyclically.

Scenario 3: HighlightPreviousAnswer with a single answer

Details:
  TestName: HighlightPreviousAnswerWithSingleAnswer
  Description: Tests the behavior of the HighlightPreviousAnswer method when there is only one answer in the current question.
Execution:
  Arrange: Initialize a GameState with a single-answer QuizQuestion and highlight this answer.
  Act: Call HighlightPreviousAnswer.
  Assert: Check that the highlighted answer index remains unchanged.
Validation:
  Validates that the highlighted index stays constant with a single answer, important in scenarios with minimal answer options to avoid unnecessary index changes.

Scenario 4: HighlightPreviousAnswer without current question

Details:
  TestName: HighlightPreviousAnswerWithoutCurrentQuestion
  Description: Ensures that the HighlightPreviousAnswer method gracefully handles the scenario where there is no current question set.
Execution:
  Arrange: Create a GameState without setting any current question.
  Act: Invoke HighlightPreviousAnswer.
  Assert: Verify that an appropriate exception or handling mechanism is triggered or no change is made to the internal state.
Validation:
  Verifies robustness in cases of missing context, ensuring that the application remains stable without a current question.

Scenario 5: HighlightPreviousAnswer during quiz with correct transitions

Details:
  TestName: HighlightPreviousAnswerCorrectTransitions
  Description: Verifies that HighlightPreviousAnswer correctly transitions from one answer to another in a normal sequential question scenario.
Execution:
  Arrange: Setup a GameState with multiple answers, starting highlight on the second answer.
  Act: Invoke HighlightPreviousAnswer twice.
  Assert: Expected resultant highlighted answer index is checked.
Validation:
  Validates that the method handles transition between indices properly, ensuring navigation accuracy for the user.



*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame;
using System.Collections.Generic;
using System.Linq;
using System;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class HighlightPreviousAnswerTest
    {
        [Test]
        public void HighlightPreviousAnswerWithMultipleAnswers()
        {
            // Arrange
            var questions = new List<QuizQuestion>
            {
                new QuizQuestion
                {
                    Answers = new[]
                    {
                        new QuizQuestionAnswer { IsCorrect = false },
                        new QuizQuestionAnswer { IsCorrect = true },
                        new QuizQuestionAnswer { IsCorrect = false }
                    }
                }
            };
            var gameState = new GameState(questions);
            gameState.MoveToNextQuestion();

            // Act
            gameState.HighlightPreviousAnswer();

            // Assert
            Assert.AreEqual(2, gameState.CurrentQuestion.Answers.Length - 1);
        }

        [Test]
        public void HighlightPreviousAnswerAtStartOfList()
        {
            // Arrange
            var questions = new List<QuizQuestion>
            {
                new QuizQuestion
                {
                    Answers = new[]
                    {
                        new QuizQuestionAnswer { IsCorrect = false },
                        new QuizQuestionAnswer { IsCorrect = true }
                    }
                }
            };
            var gameState = new GameState(questions);
            gameState.MoveToNextQuestion();

            // Act
            gameState.HighlightPreviousAnswer();

            // Assert
            Assert.AreEqual(1, gameState.CurrentQuestion.Answers.Length - 1);
        }

        [Test]
        public void HighlightPreviousAnswerWithSingleAnswer()
        {
            // Arrange
            var questions = new List<QuizQuestion>
            {
                new QuizQuestion
                {
                    Answers = new[]
                    {
                        new QuizQuestionAnswer { IsCorrect = true }
                    }
                }
            };
            var gameState = new GameState(questions);
            gameState.MoveToNextQuestion();

            // Act
            gameState.HighlightPreviousAnswer();

            // Assert
            Assert.AreEqual(0, gameState.CurrentQuestion.Answers.Length - 1);
        }

        [Test]
        public void HighlightPreviousAnswerWithoutCurrentQuestion()
        {
            // Arrange
            var gameState = new GameState(new List<QuizQuestion>());

            // Act and Assert
            Assert.DoesNotThrow(() => gameState.HighlightPreviousAnswer());
        }

        [Test]
        public void HighlightPreviousAnswerCorrectTransitions()
        {
            // Arrange
            var questions = new List<QuizQuestion>
            {
                new QuizQuestion
                {
                    Answers = new[]
                    {
                        new QuizQuestionAnswer { IsCorrect = false },
                        new QuizQuestionAnswer { IsCorrect = true },
                        new QuizQuestionAnswer { IsCorrect = false }
                    }
                }
            };
            var gameState = new GameState(questions);
            gameState.MoveToNextQuestion();
            gameState.HighlightNextAnswer(); // Move to second answer
            gameState.HighlightPreviousAnswer(); // Should move to first answer

            // Act
            gameState.HighlightPreviousAnswer(); // Should circle back to last answer

            // Assert
            Assert.AreEqual(2, gameState.CurrentQuestion.Answers.Length - 1);
        }
    }
}
