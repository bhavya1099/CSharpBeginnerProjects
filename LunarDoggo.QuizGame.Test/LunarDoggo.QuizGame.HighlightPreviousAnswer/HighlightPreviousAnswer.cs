// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=HighlightPreviousAnswer_e504497786
ROOST_METHOD_SIG_HASH=HighlightPreviousAnswer_a80232d808

   ########## Test-Scenarios ##########  

Scenario 1: HighlightPreviousAnswer With No Current Question

Details:
  TestName: HighlightPreviousAnswerWithNullCurrentQuestion
  Description: Tests the behavior of HighlightPreviousAnswer method when there is no current question selected (CurrentQuestion is null).
Execution:
  Arrange: Create a GameState instance without setting a current question.
  Act: Call HighlightPreviousAnswer method.
  Assert: Assert that the highlighted answer index remains unchanged.
Validation:
  The assertion will verify that without a current question, invoking HighlightPreviousAnswer should not alter the highlighted answer index, implying stability in cases where the method is called erroneously without a question context.

Scenario 2: HighlightPreviousAnswer With Only One Answer

Details:
  TestName: HighlightPreviousAnswerWithSingleAnswer
  Description: Verify that calling HighlightPreviousAnswer does not change the index when there is only one answer.
Execution:
  Arrange: Setup GameState with a current question having a single answer and an initial highlighted answer index of 0.
  Act: Invoke HighlightPreviousAnswer method.
  Assert: Assert that the highlighted answer index is still 0 after invocation.
Validation:
  This test confirms that for questions with a single possible answer, calling HighlightPreviousAnswer retains the same answer highlighted, ensuring that edge cases with minimum data do not cause unexpected behavior.

Scenario 3: HighlightPreviousAnswer With Multiple Answers Wrapping Around

Details:
  TestName: HighlightPreviousAnswerWithWrapping
  Description: Tests if the HighlightPreviousAnswer wraps around to the last answer when currently highlighting the first answer in a list of multiple answers.
Execution:
  Arrange: Setup GameState with a current question containing multiple answers, with the highlighted answer index initially set at 0.
  Act: Call HighlightPreviousAnswer.
  Assert: Assert that the highlighted answer index wraps and points to the last answer.
Validation:
  This checks the functionality of index wrapping, validating that the method properly navigates to the end of the answer list when moving backward from the start, which simulates a realistic user-navigation scenario in a quiz with multiple answers.

Scenario 4: HighlightPreviousAnswer While Answer Focused is in the Middle

Details:
  TestName: HighlightPreviousAnswerWithMiddleAnswerFocused
  Description: Check that HighlightPreviousAnswer correctly decrements the index when the focus is on any middle answer.
Execution:
  Arrange: Setup GameState with multiple answers, highlighted answer index set initially to a middle value.
  Act: Invoke HighlightPreviousAnswer method.
  Assert: Check if the highlighted answer index is decreased by 1.
Validation:
  This scenario ensures that standard decrement behavior functions correctly, which is crucial for consistent user experience during navigation across answers.
  
Scenario 5: HighlightPreviousAnswer Before Any Navigation Action

Details:
  TestName: HighlightPreviousAnswerInitialCall
  Description: Verify that the HighlightPreviousAnswer operates correctly on the initial call when the question is first loaded and no navigation action has been performed yet.
Execution:
  Arrange: Setup GameState with a current question that has multiple answers, with the highlighted answer index at its default setting.
  Act: Invoke HighlightPreviousAnswer.
  Assert: Assert the expected setting of highlighted index taking wrapping into account.
Validation:
  This scenario tests the method's resilience and correctness in a "fresh" scenario, where the user immediately tries to navigate backward upon a new question load, reflecting a typical user interaction pattern.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.QuizGame;
using System.Collections.Generic;

namespace LunarDoggo.QuizGame.Test
{
    [TestFixture]
    public class HighlightPreviousAnswerTest
    {
        [Test, Category("valid")]
        public void HighlightPreviousAnswerWithNullCurrentQuestion()
        {
            // Arrange
            GameState gameState = new GameState(new List<QuizQuestion>());
            gameState.SetCurrentQuestion(null);
            int initialIndex = gameState.HighlightedAnswerIndex;

            // Act
            gameState.HighlightPreviousAnswer();

            // Assert
            Assert.AreEqual(initialIndex, gameState.HighlightedAnswerIndex);
        }

        [Test, Category("valid")]
        public void HighlightPreviousAnswerWithSingleAnswer()
        {
            // Arrange
            QuizQuestion singleAnswerQuestion = new QuizQuestion
            {
                Answers = new QuizQuestionAnswer[] { new QuizQuestionAnswer() }
            };
            GameState gameState = new GameState(new List<QuizQuestion>() { singleAnswerQuestion });
            gameState.MoveToNextQuestion();

            // Act
            gameState.HighlightPreviousAnswer();

            // Assert
            Assert.AreEqual(0, gameState.HighlightedAnswerIndex);
        }

        [Test, Category("valid")]
        public void HighlightPreviousAnswerWithWrapping()
        {
            // Arrange
            QuizQuestion multipleAnswersQuestion = new QuizQuestion
            {
                Answers = new QuizQuestionAnswer[]
                {
                    new QuizQuestionAnswer(),
                    new QuizQuestionAnswer(),
                    new QuizQuestionAnswer()
                }
            };
            GameState gameState = new GameState(new List<QuizQuestion>() { multipleAnswersQuestion });
            gameState.MoveToNextQuestion();

            // Act
            gameState.HighlightPreviousAnswer();

            // Assert
            Assert.AreEqual(multipleAnswersQuestion.Answers.Length - 1, gameState.HighlightedAnswerIndex);
        }

        [Test, Category("valid")]
        public void HighlightPreviousAnswerWithMiddleAnswerFocused()
        {
            // Arrange
            QuizQuestion multipleAnswersQuestion = new QuizQuestion
            {
                Answers = new QuizQuestionAnswer[]
                {
                    new QuizQuestionAnswer(),
                    new QuizQuestionAnswer(),
                    new QuizQuestionAnswer()
                }
            };
            GameState gameState = new GameState(new List<QuizQuestion>() { multipleAnswersQuestion });
            gameState.MoveToNextQuestion();
            gameState.HighlightNextAnswer(); // Move to second answer
            
            // Act
            gameState.HighlightPreviousAnswer();

            // Assert
            Assert.AreEqual(0, gameState.HighlightedAnswerIndex);
        }

        [Test, Category("valid")]
        public void HighlightPreviousAnswerInitialCall()
        {
            // Arrange
            QuizQuestion multipleAnswersQuestion = new QuizQuestion
            {
                Answers = new QuizQuestionAnswer[]
                {
                    new QuizQuestionAnswer(),
                    new QuizQuestionAnswer(),
                    new QuizQuestionAnswer()
                }
            };
            GameState gameState = new GameState(new List<QuizQuestion>() { multipleAnswersQuestion });
            gameState.MoveToNextQuestion();
            
            // Act
            gameState.HighlightPreviousAnswer();
            
            // Assert
            Assert.AreEqual(multipleAnswersQuestion.Answers.Length - 1, gameState.HighlightedAnswerIndex);
        }
    }
}
