// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=Reset_6d2e689bc2
ROOST_METHOD_SIG_HASH=Reset_d971311384

   ########## Test-Scenarios ##########  

Scenario 1: Reset Method on an Empty Game Board

Details:
  TestName: TestResetOnEmptyBoard
  Description: This test checks the Reset method's functionality when it is called on an empty game board. The expected outcome is that the game board remains empty after the Reset method is called.
Execution:
  Arrange: Create an instance of the GameBoard class and ensure that all tiles are unoccupied.
  Act: Call the Reset method on the GameBoard instance.
  Assert: Check that all tiles on the game board are unoccupied.
Validation:
  The assertion verifies that the Reset method does not affect an empty game board. This is a necessary test to confirm that the Reset method does not inadvertently alter the game board state.

Scenario 2: Reset Method on a Partially Occupied Game Board

Details:
  TestName: TestResetOnPartiallyOccupiedBoard
  Description: This test checks the Reset method's functionality when it is called on a game board that is partially occupied. The expected outcome is that the game board is empty after the Reset method is called.
Execution:
  Arrange: Create an instance of the GameBoard class and ensure that some tiles are occupied.
  Act: Call the Reset method on the GameBoard instance.
  Assert: Check that all tiles on the game board are unoccupied.
Validation:
  The assertion verifies that the Reset method successfully clears a partially occupied game board. This is a crucial test to confirm that the Reset method works as expected in a typical game scenario.

Scenario 3: Reset Method on a Fully Occupied Game Board

Details:
  TestName: TestResetOnFullyOccupiedBoard
  Description: This test checks the Reset method's functionality when it is called on a game board that is fully occupied. The expected outcome is that the game board is empty after the Reset method is called.
Execution:
  Arrange: Create an instance of the GameBoard class and ensure that all tiles are occupied.
  Act: Call the Reset method on the GameBoard instance.
  Assert: Check that all tiles on the game board are unoccupied.
Validation:
  The assertion verifies that the Reset method successfully clears a fully occupied game board. This is an essential test to confirm that the Reset method can handle the maximum possible amount of data.

Scenario 4: Multiple Resets on a Game Board

Details:
  TestName: TestMultipleResets
  Description: This test checks the Reset method's functionality when it is called multiple times on a game board. The expected outcome is that the game board remains empty after each Reset method call.
Execution:
  Arrange: Create an instance of the GameBoard class and ensure that all tiles are occupied.
  Act: Call the Reset method on the GameBoard instance multiple times.
  Assert: Check that all tiles on the game board are unoccupied after each reset.
Validation:
  The assertion verifies that the Reset method can be called multiple times without causing any issues. This test is necessary to confirm that the Reset method is idempotent.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;

namespace TicTacToe.Test
{
    public class ResetTest
    {
        private GameBoard _gameBoard;

        [SetUp]
        public void Setup()
        {
            _gameBoard = new GameBoard();
        }

        [Test, Category("valid")]
        public void TestResetOnEmptyBoard()
        {
            _gameBoard.Reset();
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    Assert.AreEqual(0, _gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetOnPartiallyOccupiedBoard()
        {
            for (int x = 0; x < 2; x++)
            {
                for (int y = 0; y < 2; y++)
                {
                    _gameBoard.tiles[x, y] = 1;
                }
            }
            _gameBoard.Reset();
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    Assert.AreEqual(0, _gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetOnFullyOccupiedBoard()
        {
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    _gameBoard.tiles[x, y] = 1;
                }
            }
            _gameBoard.Reset();
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    Assert.AreEqual(0, _gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestMultipleResets()
        {
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    _gameBoard.tiles[x, y] = 1;
                }
            }
            for (int i = 0; i < 5; i++)
            {
                _gameBoard.Reset();
                for (int x = 0; x < 3; x++)
                {
                    for (int y = 0; y < 3; y++)
                    {
                        Assert.AreEqual(0, _gameBoard.tiles[x, y]);
                    }
                }
            }
        }

        [TearDown]
        public void TearDown()
        {
            _gameBoard = null;
        }
    }
}
