// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=Reset_6d2e689bc2
ROOST_METHOD_SIG_HASH=Reset_d971311384

   ########## Test-Scenarios ##########  


Scenario 1: Testing Reset method when all tiles are already empty
Details:
  TestName: TestResetWhenAllTilesEmpty
  Description: Verify that the Reset method sets all tiles to 0 when they are already empty.
  Execution:
    Arrange: Ensure all tiles are initialized to 0.
    Act: Call the Reset method.
    Assert: Check that all tiles are set to 0.
  Validation: This test confirms that the Reset method correctly resets the game board when no tiles are occupied.

Scenario 2: Testing Reset method when some tiles are occupied
Details:
  TestName: TestResetWhenTilesOccupied
  Description: Validate that the Reset method clears all tiles even if some of them are already occupied.
  Execution:
    Arrange: Occupy a few tiles on the game board.
    Act: Invoke the Reset method.
    Assert: Verify that all tiles are reset to 0.
  Validation: This scenario ensures that the Reset method can reset the game board effectively, irrespective of the tile occupancy status.

Scenario 3: Testing Reset method for a completely filled board
Details:
  TestName: TestResetWhenBoardFull
  Description: Check if the Reset method correctly resets all tiles when the board is completely filled.
  Execution:
    Arrange: Occupy all tiles on the game board.
    Act: Reset the game board using the Reset method.
    Assert: Confirm that all tiles are cleared (set to 0).
  Validation: This test ensures that the Reset method handles the scenario of a full game board appropriately.

Scenario 4: Testing Reset method for a large game board size
Details:
  TestName: TestResetForLargeBoard
  Description: Ensure the Reset method functions correctly for a larger game board size.
  Execution:
    Arrange: Create a game board with a larger size (e.g., 5x5).
    Act: Reset the game board using the Reset method.
    Assert: Validate that all tiles are reset to 0.
  Validation: This test verifies the scalability and correctness of the Reset method for different game board sizes.

Scenario 5: Testing Reset method multiple times consecutively
Details:
  TestName: TestMultipleConsecutiveResets
  Description: Verify the behavior of Reset method when called multiple times consecutively.
  Execution:
    Arrange: Call the Reset method once.
    Act: Call the Reset method again without any intermediate actions.
    Assert: Ensure that all tiles are reset to 0 after each Reset call.
  Validation: This scenario checks for any unexpected behavior or side effects of calling Reset method multiple times in a row.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using TicTacToe.Test;

namespace TicTacToe.Test
{
    public class ResetTest
    {
        [Test, Category("valid")]
        public void TestResetWhenAllTilesEmpty()
        {
            GameBoard gameBoard = new GameBoard();
            gameBoard.Reset();

            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetWhenTilesOccupied()
        {
            GameBoard gameBoard = new GameBoard();
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 1);
            gameBoard.Reset();

            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetWhenBoardFull()
        {
            GameBoard gameBoard = new GameBoard();
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    gameBoard.OccupyTile(new Player(1, "X"), x, y);
                }
            }
            gameBoard.Reset();

            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetForLargeBoard()
        {
            GameBoard gameBoard = new GameBoard(5, 5);
            gameBoard.Reset();

            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestMultipleConsecutiveResets()
        {
            GameBoard gameBoard = new GameBoard();
            gameBoard.Reset();
            gameBoard.Reset();

            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }
    }
}
