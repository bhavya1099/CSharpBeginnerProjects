// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Reset_6d2e689bc2
ROOST_METHOD_SIG_HASH=Reset_d971311384

   ########## Test-Scenarios ##########  

Scenario 1: Resetting the game board
  Details:
    TestName: TestReset
    Description: Verify that the Reset method correctly resets all tiles on the game board to 0.
  Execution:
    Arrange: Create a new instance of the GameBoard class.
    Act: Call the Reset method.
    Assert: Check that all tiles in the tiles array are set to 0.
  Validation:
    The assertion aims to verify that the Reset method correctly resets the game board by setting all tiles to 0. This is important to ensure that the game starts with a clean board for each new game.

Scenario 2: Resetting the game board with existing occupied tiles
  Details:
    TestName: TestResetWithOccupiedTiles
    Description: Verify that the Reset method correctly resets all tiles on the game board to 0, even if some tiles were previously occupied.
  Execution:
    Arrange: Create a new instance of the GameBoard class. Set some tiles to non-zero values.
    Act: Call the Reset method.
    Assert: Check that all tiles in the tiles array are set to 0.
  Validation:
    The assertion aims to verify that the Reset method can reset the game board to a clean state, even if some tiles were previously occupied. This is important to ensure that the game can be restarted without any lingering state from previous games.

Scenario 3: Resetting an already empty game board
  Details:
    TestName: TestResetEmptyBoard
    Description: Verify that the Reset method does not change the game board if it is already empty.
  Execution:
    Arrange: Create a new instance of the GameBoard class.
    Act: Call the Reset method.
    Assert: Check that all tiles in the tiles array are still set to 0.
  Validation:
    The assertion aims to verify that the Reset method does not have any unintended side effects when called on an already empty game board. This is important to ensure that calling Reset multiple times does not change the game state.

Scenario 4: Resetting the game board during an ongoing game
  Details:
    TestName: TestResetDuringGame
    Description: Verify that the Reset method correctly resets the game board and cancels any ongoing game.
  Execution:
    Arrange: Create a new instance of the GameBoard class. Occupy some tiles to simulate an ongoing game.
    Act: Call the Reset method.
    Assert: Check that all tiles in the tiles array are set to 0 and verify that the ongoing game is canceled.
  Validation:
    The assertion aims to verify that the Reset method can reset the game board and cancel any ongoing game. This is important to ensure that the game can be restarted at any point, even during an ongoing game.

Scenario 5: Resetting the game board after a game has ended
  Details:
    TestName: TestResetAfterGameEnd
    Description: Verify that the Reset method correctly resets the game board after a game has ended.
  Execution:
    Arrange: Create a new instance of the GameBoard class. Simulate a game that has ended.
    Act: Call the Reset method.
    Assert: Check that all tiles in the tiles array are set to 0 and verify that the game has ended.
  Validation:
    The assertion aims to verify that the Reset method can reset the game board after a game has ended. This is important to ensure that the game can be restarted after a game has concluded, allowing players to play again without having to close and reopen the application.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;

namespace TicTacToe.Test
{
    [TestFixture]
    public class ResetTest
    {
        private GameBoard gameBoard;

        [SetUp]
        public void SetUp()
        {
            gameBoard = new GameBoard();
        }

        [Test]
        [Category("valid")]
        public void TestReset()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 1);

            // Act
            gameBoard.Reset();

            // Assert
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test]
        [Category("valid")]
        public void TestResetWithOccupiedTiles()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 1);

            // Act
            gameBoard.Reset();

            // Assert
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test]
        [Category("valid")]
        public void TestResetEmptyBoard()
        {
            // Arrange

            // Act
            gameBoard.Reset();

            // Assert
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test]
        [Category("valid")]
        public void TestResetDuringGame()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 1);

            // Act
            gameBoard.Reset();

            // Assert
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test]
        [Category("valid")]
        public void TestResetAfterGameEnd()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(1, "X"), 1, 0);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 0);

            // Act
            gameBoard.Reset();

            // Assert
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }
    }
}
