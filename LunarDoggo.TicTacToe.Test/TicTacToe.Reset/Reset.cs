// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=Reset_6d2e689bc2
ROOST_METHOD_SIG_HASH=Reset_d971311384

   ########## Test-Scenarios ##########  

Scenario 1: Reset Method on an Empty Game Board

Details:
  TestName: TestResetOnEmptyGameBoard
  Description: This test is meant to check if the Reset method works correctly on an empty game board. The Reset method should set all tiles to 0, which is the initial state of an empty board.
Execution:
  Arrange: Create a new instance of the GameBoard class.
  Act: Invoke the Reset method on the GameBoard instance.
  Assert: Use NUnit assertions to check if all elements in the tiles array are 0.
Validation:
  The assertion aims to verify if all tiles have been correctly reset to 0. The expected outcome is that all tiles should be 0 as the Reset method should clear all player moves from the game board. This test checks the Reset method's functionality and its ability to clear the game board.

Scenario 2: Reset Method on a Fully Occupied Game Board

Details:
  TestName: TestResetOnFullyOccupiedGameBoard
  Description: This test is meant to check if the Reset method works correctly on a fully occupied game board. The Reset method should set all tiles to 0, regardless of their previous state.
Execution:
  Arrange: Create a new instance of the GameBoard class and fully occupy all tiles.
  Act: Invoke the Reset method on the GameBoard instance.
  Assert: Use NUnit assertions to check if all elements in the tiles array are 0.
Validation:
  The assertion aims to verify if all tiles have been correctly reset to 0. The expected outcome is that all tiles should be 0 as the Reset method should clear all player moves from the game board. This test checks the Reset method's functionality and its ability to clear the game board, even when it is fully occupied.

Scenario 3: Reset Method on a Partially Occupied Game Board

Details:
  TestName: TestResetOnPartiallyOccupiedGameBoard
  Description: This test is meant to check if the Reset method works correctly on a partially occupied game board. The Reset method should set all tiles to 0, regardless of their previous state.
Execution:
  Arrange: Create a new instance of the GameBoard class and partially occupy some tiles.
  Act: Invoke the Reset method on the GameBoard instance.
  Assert: Use NUnit assertions to check if all elements in the tiles array are 0.
Validation:
  The assertion aims to verify if all tiles have been correctly reset to 0. The expected outcome is that all tiles should be 0 as the Reset method should clear all player moves from the game board. This test checks the Reset method's functionality and its ability to clear the game board, even when it is partially occupied.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class ResetTest
    {
        private GameBoard gameBoard;

        [SetUp]
        public void Setup()
        {
            gameBoard = new GameBoard();
        }

        [Test, Category("valid")]
        public void TestResetOnEmptyGameBoard()
        {
            gameBoard.Reset();

            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetOnFullyOccupiedGameBoard()
        {
            Player player1 = new Player(1, "X");
            Player player2 = new Player(2, "O");

            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    if ((x + y) % 2 == 0)
                    {
                        gameBoard.OccupyTile(player1, x, y);
                    }
                    else
                    {
                        gameBoard.OccupyTile(player2, x, y);
                    }
                }
            }

            gameBoard.Reset();

            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetOnPartiallyOccupiedGameBoard()
        {
            Player player1 = new Player(1, "X");

            gameBoard.OccupyTile(player1, 1, 1);
            gameBoard.OccupyTile(player1, 2, 2);

            gameBoard.Reset();

            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [TearDown]
        public void TearDown()
        {
            gameBoard = null;
        }
    }
}
