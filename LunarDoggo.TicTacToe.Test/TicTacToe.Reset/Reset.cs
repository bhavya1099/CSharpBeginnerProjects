// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=Reset_6d2e689bc2
ROOST_METHOD_SIG_HASH=Reset_d971311384

   ########## Test-Scenarios ##########  

Scenario 1: Reset Method on an Empty Game Board

Details:
  TestName: TestResetOnEmptyBoard
  Description: This test checks the Reset method's functionality when it is called on an empty game board. The expected outcome is that the game board remains empty after the Reset method is called.
Execution:
  Arrange: Create an instance of the GameBoard class, ensure that all tiles are unoccupied.
  Act: Call the Reset method on the GameBoard instance.
  Assert: Check that all tiles on the game board are unoccupied.
Validation:
  The assertion verifies that the Reset method does not affect an empty game board. This is a valid scenario because the Reset method is expected to clear the game board, and if the board is already clear, it should remain so after the method is invoked.

Scenario 2: Reset Method on a Fully Occupied Game Board

Details:
  TestName: TestResetOnFullyOccupiedBoard
  Description: This test checks the Reset method's functionality when it is called on a fully occupied game board. The expected outcome is that the game board is empty after the Reset method is called.
Execution:
  Arrange: Create an instance of the GameBoard class, ensure that all tiles are occupied.
  Act: Call the Reset method on the GameBoard instance.
  Assert: Check that all tiles on the game board are unoccupied.
Validation:
  The assertion verifies that the Reset method clears a fully occupied game board. This is a valid scenario because the Reset method is expected to clear the game board, and if the board is fully occupied, it should be empty after the method is invoked.

Scenario 3: Reset Method on a Partially Occupied Game Board

Details:
  TestName: TestResetOnPartiallyOccupiedBoard
  Description: This test checks the Reset method's functionality when it is called on a partially occupied game board. The expected outcome is that the game board is empty after the Reset method is called.
Execution:
  Arrange: Create an instance of the GameBoard class, ensure that some tiles are occupied and others are unoccupied.
  Act: Call the Reset method on the GameBoard instance.
  Assert: Check that all tiles on the game board are unoccupied.
Validation:
  The assertion verifies that the Reset method clears a partially occupied game board. This is a valid scenario because the Reset method is expected to clear the game board, and if the board is partially occupied, it should be empty after the method is invoked.

Scenario 4: Reset Method Called Multiple Times

Details:
  TestName: TestMultipleResets
  Description: This test checks the Reset method's functionality when it is called multiple times consecutively. The expected outcome is that the game board remains empty after each Reset method call.
Execution:
  Arrange: Create an instance of the GameBoard class, ensure that all tiles are unoccupied.
  Act: Call the Reset method on the GameBoard instance multiple times.
  Assert: Check that all tiles on the game board are unoccupied after each Reset method call.
Validation:
  The assertion verifies that the Reset method maintains an empty game board even when called multiple times. This is a valid scenario because the Reset method is expected to clear the game board, and if the board is already clear, it should remain so after each Reset method invocation.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    public class ResetTest
    {
        private GameBoard testGameBoard;
        private const int boardSize = 3;

        [SetUp]
        public void Setup()
        {
            testGameBoard = new GameBoard();
        }

        [Test, Category("valid")]
        public void TestResetOnEmptyBoard()
        {
            testGameBoard.Reset();

            for (int x = 0; x < boardSize; x++)
            {
                for (int y = 0; y < boardSize; y++)
                {
                    Assert.IsFalse(testGameBoard.IsTileOccupied(x, y), $"Tile at position ({x}, {y}) is occupied after Reset on an empty board.");
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetOnFullyOccupiedBoard()
        {
            for (int x = 0; x < boardSize; x++)
            {
                for (int y = 0; y < boardSize; y++)
                {
                    testGameBoard.OccupyTile(new Player(1, "X"), x, y);
                }
            }

            testGameBoard.Reset();

            for (int x = 0; x < boardSize; x++)
            {
                for (int y = 0; y < boardSize; y++)
                {
                    Assert.IsFalse(testGameBoard.IsTileOccupied(x, y), $"Tile at position ({x}, {y}) is occupied after Reset on a fully occupied board.");
                }
            }
        }

        [Test, Category("valid")]
        public void TestResetOnPartiallyOccupiedBoard()
        {
            testGameBoard.OccupyTile(new Player(1, "X"), 1, 1);

            testGameBoard.Reset();

            for (int x = 0; x < boardSize; x++)
            {
                for (int y = 0; y < boardSize; y++)
                {
                    Assert.IsFalse(testGameBoard.IsTileOccupied(x, y), $"Tile at position ({x}, {y}) is occupied after Reset on a partially occupied board.");
                }
            }
        }

        [Test, Category("valid")]
        public void TestMultipleResets()
        {
            for (int i = 0; i < 3; i++)
            {
                testGameBoard.Reset();

                for (int x = 0; x < boardSize; x++)
                {
                    for (int y = 0; y < boardSize; y++)
                    {
                        Assert.IsFalse(testGameBoard.IsTileOccupied(x, y), $"Tile at position ({x}, {y}) is occupied after Reset call number {i + 1}.");
                    }
                }
            }
        }
    }
}
