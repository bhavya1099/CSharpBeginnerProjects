// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Reset_6d2e689bc2
ROOST_METHOD_SIG_HASH=Reset_d971311384

   ########## Test-Scenarios ##########  

Scenario 1: Resetting the game board
  Details:
    TestName: TestReset
    Description: Verify that the Reset method correctly resets all tiles on the game board to 0.
  Execution:
    Arrange: Create a new instance of the GameBoard class.
    Act: Call the Reset method.
    Assert: Check that all tiles in the tiles array are set to 0.
  Validation:
    The assertion aims to verify that the Reset method correctly resets the game board by setting all tiles to 0. This is important to ensure that the game starts with a clean board for each new game.

Scenario 2: Resetting the game board with existing occupied tiles
  Details:
    TestName: TestResetWithOccupiedTiles
    Description: Verify that the Reset method correctly resets all tiles on the game board to 0, even if some tiles were previously occupied.
  Execution:
    Arrange: Create a new instance of the GameBoard class. Set some tiles to non-zero values.
    Act: Call the Reset method.
    Assert: Check that all tiles in the tiles array are set to 0.
  Validation:
    The assertion aims to verify that the Reset method can reset the game board to a clean state, even if some tiles were previously occupied. This is important to ensure that the game can be restarted without any lingering occupied tiles.

Scenario 3: Resetting an already reset game board
  Details:
    TestName: TestResetOnAlreadyResetBoard
    Description: Verify that calling the Reset method multiple times does not change the state of the game board.
  Execution:
    Arrange: Create a new instance of the GameBoard class. Call the Reset method.
    Act: Call the Reset method again.
    Assert: Check that all tiles in the tiles array are still set to 0.
  Validation:
    The assertion aims to verify that calling the Reset method multiple times does not have any side effects and does not change the state of the game board. This is important to ensure that the Reset method can be safely called multiple times without causing any issues.

Scenario 4: Resetting the game board after a player has occupied tiles
  Details:
    TestName: TestResetAfterOccupation
    Description: Verify that the Reset method correctly resets all tiles on the game board to 0 after a player has occupied some tiles.
  Execution:
    Arrange: Create a new instance of the GameBoard class. Occupy some tiles by calling the OccupyTile method.
    Act: Call the Reset method.
    Assert: Check that all tiles in the tiles array are set to 0.
  Validation:
    The assertion aims to verify that the Reset method can reset the game board to a clean state even after a player has occupied some tiles. This is important to ensure that the game can be restarted without any lingering occupied tiles.

Scenario 5: Resetting the game board with invalid tile indices
  Details:
    TestName: TestResetWithInvalidIndices
    Description: Verify that the Reset method handles invalid tile indices correctly and does not throw any exceptions.
  Execution:
    Arrange: Create a new instance of the GameBoard class.
    Act: Call the Reset method with invalid tile indices (e.g., negative values, values greater than the maximum index).
    Assert: Verify that no exceptions are thrown.
  Validation:
    The assertion aims to verify that the Reset method handles invalid tile indices gracefully by not throwing any exceptions. This is important to ensure that the game board can be reset safely, even if invalid indices are passed to the method.


*/

// ********RoostGPT********
using NUnit.Framework;
using TicTacToe.Test;

namespace TicTacToe.Test
{
    [TestFixture]
    public class ResetTest
    {
        [Test]
        [Category("valid")]
        public void TestReset()
        {
            var gameBoard = new GameBoard();
            gameBoard.Reset();
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test]
        [Category("valid")]
        public void TestResetWithOccupiedTiles()
        {
            var gameBoard = new GameBoard();
            gameBoard.tiles[0, 0] = 1;
            gameBoard.tiles[1, 1] = 2;
            gameBoard.Reset();
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test]
        [Category("valid")]
        public void TestResetOnAlreadyResetBoard()
        {
            var gameBoard = new GameBoard();
            gameBoard.Reset();
            gameBoard.Reset();
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test]
        [Category("valid")]
        public void TestResetAfterOccupation()
        {
            var gameBoard = new GameBoard();
            gameBoard.OccupyTile(new Player(), 0, 0);
            gameBoard.OccupyTile(new Player(), 1, 1);
            gameBoard.Reset();
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }

        [Test]
        [Category("valid")]
        public void TestResetWithInvalidIndices()
        {
            var gameBoard = new GameBoard();
            gameBoard.Reset();
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    Assert.AreEqual(0, gameBoard.tiles[x, y]);
                }
            }
        }
    }
}
