// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=HasWon_ca2e109cdd
ROOST_METHOD_SIG_HASH=HasWon_c6b52a8205

   ########## Test-Scenarios ##########  

Scenario 1: Player has won by filling a row

Details:
    TestName: TestHasWonByRow.
    Description: This test checks if the HasWon method correctly identifies when a player has won by filling a row with their symbol.

Execution:
    Arrange: Create a game board where a player has filled a row with their symbol.
    Act: Invoke the HasWon method with the player's identifier.
    Assert: Assert that the method returns true.

Validation:
    The assertion verifies that the HasWon method correctly identifies a win by row. This test is significant because it validates a core part of the game's win condition.

Scenario 2: Player has won by filling a column

Details:
    TestName: TestHasWonByColumn.
    Description: This test checks if the HasWon method correctly identifies when a player has won by filling a column with their symbol.

Execution:
    Arrange: Create a game board where a player has filled a column with their symbol.
    Act: Invoke the HasWon method with the player's identifier.
    Assert: Assert that the method returns true.

Validation:
    The assertion verifies that the HasWon method correctly identifies a win by column. This test is important as it validates another part of the game's win condition.

Scenario 3: Player has won by filling a diagonal

Details:
    TestName: TestHasWonByDiagonal.
    Description: This test checks if the HasWon method correctly identifies when a player has won by filling a diagonal with their symbol.

Execution:
    Arrange: Create a game board where a player has filled a diagonal with their symbol.
    Act: Invoke the HasWon method with the player's identifier.
    Assert: Assert that the method returns true.

Validation:
    The assertion verifies that the HasWon method correctly identifies a win by diagonal. This test is crucial as it validates the final part of the game's win condition.

Scenario 4: Player has not won

Details:
    TestName: TestHasNotWon.
    Description: This test checks if the HasWon method correctly identifies when a player has not won.

Execution:
    Arrange: Create a game board where no player has three of their symbols in a row, column, or diagonal.
    Act: Invoke the HasWon method with a player's identifier.
    Assert: Assert that the method returns false.

Validation:
    The assertion verifies that the HasWon method correctly identifies when a player has not won. This test is significant as it ensures the method does not falsely identify a win condition.

Scenario 5: Test with an empty game board

Details:
    TestName: TestEmptyBoard.
    Description: This test checks if the HasWon method correctly handles an empty game board.

Execution:
    Arrange: Create an empty game board.
    Act: Invoke the HasWon method with a player's identifier.
    Assert: Assert that the method returns false.

Validation:
    The assertion verifies that the HasWon method correctly handles an empty game board by not falsely identifying a win condition. This test is important as it ensures the method behaves correctly in edge cases.


*/

// ********RoostGPT********
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class HasWonTest
    {
        private GameBoard _gameBoard;

        [SetUp]
        public void SetUp()
        {
            _gameBoard = new GameBoard();
        }

        [Test, Category("valid")]
        public void TestHasWonByRow()
        {
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 1);
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 2);
            Assert.IsTrue(_gameBoard.HasWon(1));
        }

        [Test, Category("valid")]
        public void TestHasWonByColumn()
        {
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 1, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 2, 0);
            Assert.IsTrue(_gameBoard.HasWon(1));
        }

        [Test, Category("valid")]
        public void TestHasWonByDiagonal()
        {
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 1, 1);
            _gameBoard.OccupyTile(new Player(1, "X"), 2, 2);
            Assert.IsTrue(_gameBoard.HasWon(1));
        }

        [Test, Category("invalid")]
        public void TestHasNotWon()
        {
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 1);
            _gameBoard.OccupyTile(new Player(2, "O"), 0, 2);
            Assert.IsFalse(_gameBoard.HasWon(1));
        }

        [Test, Category("boundary")]
        public void TestEmptyBoard()
        {
            Assert.IsFalse(_gameBoard.HasWon(1));
        }
    }
}
