// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=HasWon_ca2e109cdd
ROOST_METHOD_SIG_HASH=HasWon_c6b52a8205

   ########## Test-Scenarios ##########  

Scenario 1: Player has won by filling a row

Details:
    TestName: TestHasWonByRow.
    Description: This test checks if the HasWon method correctly identifies when a player has won by filling a row with their symbol.

Execution:
    Arrange: Create a game board where a player has filled a row with their symbol.
    Act: Invoke the HasWon method with the player's identifier.
    Assert: Assert that the method returns true.

Validation:
    The assertion verifies that the HasWon method correctly identifies a win by row. This test is significant as it validates a core part of the game mechanics.


Scenario 2: Player has won by filling a column

Details:
    TestName: TestHasWonByColumn.
    Description: This test checks if the HasWon method correctly identifies when a player has won by filling a column with their symbol.

Execution:
    Arrange: Create a game board where a player has filled a column with their symbol.
    Act: Invoke the HasWon method with the player's identifier.
    Assert: Assert that the method returns true.

Validation:
    The assertion verifies that the HasWon method correctly identifies a win by column. This test is significant as it verifies the game's ability to recognize a vertical win.


Scenario 3: Player has won by filling a diagonal

Details:
    TestName: TestHasWonByDiagonal.
    Description: This test checks if the HasWon method correctly identifies when a player has won by filling a diagonal with their symbol.

Execution:
    Arrange: Create a game board where a player has filled a diagonal with their symbol.
    Act: Invoke the HasWon method with the player's identifier.
    Assert: Assert that the method returns true.

Validation:
    The assertion verifies that the HasWon method correctly identifies a win by diagonal. This test is significant as it demonstrates the game's ability to recognize a diagonal win.


Scenario 4: Player has not won

Details:
    TestName: TestHasNotWon.
    Description: This test checks if the HasWon method correctly identifies when a player has not won.

Execution:
    Arrange: Create a game board where no player has won.
    Act: Invoke the HasWon method with a player's identifier.
    Assert: Assert that the method returns false.

Validation:
    The assertion verifies that the HasWon method correctly identifies when a player has not won. This test is significant as it validates the game's ability to continue when no win condition has been met.


Scenario 5: Test with an empty board

Details:
    TestName: TestHasWonWithEmptyBoard.
    Description: This test checks if the HasWon method correctly identifies that no player has won when the board is empty.

Execution:
    Arrange: Create an empty game board.
    Act: Invoke the HasWon method with a player's identifier.
    Assert: Assert that the method returns false.

Validation:
    The assertion verifies that the HasWon method correctly identifies that no player has won when the board is empty. This test is significant as it ensures that the game starts in a valid state.


*/

// ********RoostGPT********
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class HasWonTest
    {
        private GameBoard _gameBoard;

        [SetUp]
        public void SetUp()
        {
            _gameBoard = new GameBoard();
        }

        [Test, Category("valid")]
        public void TestHasWonByRow()
        {
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 1);
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 2);
            Assert.IsTrue(_gameBoard.HasWon(1));
        }

        [Test, Category("valid")]
        public void TestHasWonByColumn()
        {
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 1, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 2, 0);
            Assert.IsTrue(_gameBoard.HasWon(1));
        }

        [Test, Category("valid")]
        public void TestHasWonByDiagonal()
        {
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 1, 1);
            _gameBoard.OccupyTile(new Player(1, "X"), 2, 2);
            Assert.IsTrue(_gameBoard.HasWon(1));
        }

        [Test, Category("invalid")]
        public void TestHasNotWon()
        {
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            _gameBoard.OccupyTile(new Player(1, "X"), 0, 1);
            _gameBoard.OccupyTile(new Player(2, "O"), 0, 2);
            Assert.IsFalse(_gameBoard.HasWon(1));
        }

        [Test, Category("boundary")]
        public void TestHasWonWithEmptyBoard()
        {
            Assert.IsFalse(_gameBoard.HasWon(1));
        }
    }
}
