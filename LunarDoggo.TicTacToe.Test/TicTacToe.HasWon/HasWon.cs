// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=HasWon_ca2e109cdd
ROOST_METHOD_SIG_HASH=HasWon_c6b52a8205

   ########## Test-Scenarios ##########  

Scenario 1: Player has won in a row

Details:
  TestName: PlayerHasWonInARow
  Description: This test is meant to check if the method correctly identifies that a player has won in a row.
  Execution:
    Arrange: Create a game board with the specified player occupying all three tiles in a row.
    Act: Invoke the HasWon method with the player's ID.
    Assert: Verify that the method returns true.
  Validation:
    The assertion aims to verify that the method correctly identifies that the player has won in a row. This is significant in determining the outcome of the game and declaring the winner.

Scenario 2: Player has won in a column

Details:
  TestName: PlayerHasWonInAColumn
  Description: This test is meant to check if the method correctly identifies that a player has won in a column.
  Execution:
    Arrange: Create a game board with the specified player occupying all three tiles in a column.
    Act: Invoke the HasWon method with the player's ID.
    Assert: Verify that the method returns true.
  Validation:
    The assertion aims to verify that the method correctly identifies that the player has won in a column. This is significant in determining the outcome of the game and declaring the winner.

Scenario 3: Player has won in a diagonal

Details:
  TestName: PlayerHasWonInADiagonal
  Description: This test is meant to check if the method correctly identifies that a player has won in a diagonal.
  Execution:
    Arrange: Create a game board with the specified player occupying all three tiles in a diagonal.
    Act: Invoke the HasWon method with the player's ID.
    Assert: Verify that the method returns true.
  Validation:
    The assertion aims to verify that the method correctly identifies that the player has won in a diagonal. This is significant in determining the outcome of the game and declaring the winner.

Scenario 4: Player has not won in any row, column, or diagonal

Details:
  TestName: PlayerHasNotWon
  Description: This test is meant to check if the method correctly identifies that the player has not won in any row, column, or diagonal.
  Execution:
    Arrange: Create a game board with the specified player not occupying any row, column, or diagonal.
    Act: Invoke the HasWon method with the player's ID.
    Assert: Verify that the method returns false.
  Validation:
    The assertion aims to verify that the method correctly identifies that the player has not won in any row, column, or diagonal. This is significant in determining if the game is still ongoing or has ended in a draw.

Scenario 5: All fields on the game board are occupied

Details:
  TestName: AllFieldsOccupied
  Description: This test is meant to check if the method correctly identifies that all fields on the game board are occupied.
  Execution:
    Arrange: Create a game board with all fields occupied by players.
    Act: Invoke the HasWon method with the player's ID.
    Assert: Verify that the method returns false.
  Validation:
    The assertion aims to verify that the method correctly identifies that all fields on the game board are occupied. This is significant in determining if the game has ended in a draw.

Scenario 6: Player ID is not found on the game board

Details:
  TestName: PlayerIdNotFound
  Description: This test is meant to check if the method correctly handles the case where the specified player ID is not found on the game board.
  Execution:
    Arrange: Create a game board with no tiles occupied by the specified player.
    Act: Invoke the HasWon method with the player's ID.
    Assert: Verify that the method returns false.
  Validation:
    The assertion aims to verify that the method correctly handles the case where the specified player ID is not found on the game board. This is significant in ensuring the method's robustness and accuracy in different game scenarios.

Scenario 7: Player ID is zero

Details:
  TestName: PlayerIdIsZero
  Description: This test is meant to check if the method correctly handles the case where the player ID is zero.
  Execution:
    Arrange: Create a game board with tiles occupied by players, but none with ID zero.
    Act: Invoke the HasWon method with a player ID of zero.
    Assert: Verify that the method returns false.
  Validation:
    The assertion aims to verify that the method correctly handles the case where the player ID is zero. This is significant in ensuring the method's robustness and accuracy in different game scenarios.

Scenario 8: Player ID is negative

Details:
  TestName: PlayerIdIsNegative
  Description: This test is meant to check if the method correctly handles the case where the player ID is negative.
  Execution:
    Arrange: Create a game board with tiles occupied by players, but none with negative IDs.
    Act: Invoke the HasWon method with a negative player ID.
    Assert: Verify that the method returns false.
  Validation:
    The assertion aims to verify that the method correctly handles the case where the player ID is negative. This is significant in ensuring the method's robustness and accuracy in different game scenarios.


*/

// ********RoostGPT********
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class HasWonTest
    {
        private GameBoard gameBoard;

        [SetUp]
        public void SetUp()
        {
            gameBoard = new GameBoard();
        }

        [Test]
        [Category("valid")]
        public void PlayerHasWonInARow()
        {
            // Arrange
            byte player = 1;
            gameBoard.OccupyTile(new Player(player, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(player, "X"), 0, 1);
            gameBoard.OccupyTile(new Player(player, "X"), 0, 2);

            // Act
            bool result = gameBoard.HasWon(player);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        [Category("valid")]
        public void PlayerHasWonInAColumn()
        {
            // Arrange
            byte player = 2;
            gameBoard.OccupyTile(new Player(player, "O"), 0, 0);
            gameBoard.OccupyTile(new Player(player, "O"), 1, 0);
            gameBoard.OccupyTile(new Player(player, "O"), 2, 0);

            // Act
            bool result = gameBoard.HasWon(player);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        [Category("valid")]
        public void PlayerHasWonInADiagonal()
        {
            // Arrange
            byte player = 1;
            gameBoard.OccupyTile(new Player(player, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(player, "X"), 1, 1);
            gameBoard.OccupyTile(new Player(player, "X"), 2, 2);

            // Act
            bool result = gameBoard.HasWon(player);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        [Category("valid")]
        public void PlayerHasNotWon()
        {
            // Arrange
            byte player = 1;
            gameBoard.OccupyTile(new Player(player, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(player, "X"), 1, 0);
            gameBoard.OccupyTile(new Player(player, "X"), 2, 1);

            // Act
            bool result = gameBoard.HasWon(player);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void AllFieldsOccupied()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 0, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 0, 2);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 0);
            gameBoard.OccupyTile(new Player(1, "X"), 1, 1);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 2);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 2, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 2);

            // Act
            bool result = gameBoard.HasWon(1);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void PlayerIdNotFound()
        {
            // Arrange
            byte player = 3;
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 0, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 0, 2);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 0);
            gameBoard.OccupyTile(new Player(1, "X"), 1, 1);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 2);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 2, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 2);

            // Act
            bool result = gameBoard.HasWon(player);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void PlayerIdIsZero()
        {
            // Arrange
            byte player = 0;
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 0, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 0, 2);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 0);
            gameBoard.OccupyTile(new Player(1, "X"), 1, 1);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 2);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 2, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 2);

            // Act
            bool result = gameBoard.HasWon(player);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void PlayerIdIsNegative()
        {
            // Arrange
            byte player = -1;
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 0, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 0, 2);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 0);
            gameBoard.OccupyTile(new Player(1, "X"), 1, 1);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 2);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 2, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 2);

            // Act
            bool result = gameBoard.HasWon(player);

            // Assert
            Assert.IsFalse(result);
        }
    }
}
