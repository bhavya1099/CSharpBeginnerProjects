// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=HasWon_ca2e109cdd
ROOST_METHOD_SIG_HASH=HasWon_c6b52a8205

   ########## Test-Scenarios ##########  


Scenario 1: Testing HasWon method for a player winning in a row

Details:
  TestName: TestHasWonForPlayerWinningInRow
  Description: Verify that the HasWon method correctly identifies when a player wins by occupying all tiles in a row.
  Execution:
    Arrange: Set up a game board with a winning row for a specific player.
    Act: Call the HasWon method for the player in the winning row.
    Assert: Check that the method returns true.
  Validation:
    Ensure that the method can correctly detect a win condition in a row, which is crucial for determining the game outcome.

Scenario 2: Testing HasWon method for a player winning in a column

Details:
  TestName: TestHasWonForPlayerWinningInColumn
  Description: Validate the behavior of the HasWon method when a player occupies all tiles in a column.
  Execution:
    Arrange: Prepare a game board where a player has won in a column.
    Act: Invoke the HasWon method for the winning player.
    Assert: Verify that the method returns true.
  Validation:
    Confirm that the method can recognize a win scenario in a column, ensuring accurate game result determination.

Scenario 3: Testing HasWon method for a player winning in diagonals

Details:
  TestName: TestHasWonForPlayerWinningInDiagonals
  Description: Check the functionality of the HasWon method for detecting a player's victory in diagonal lines.
  Execution:
    Arrange: Create a game board where a player wins in a diagonal pattern.
    Act: Call the HasWon method for the player achieving victory diagonally.
    Assert: Ensure that the method returns true.
  Validation:
    Validate the method's ability to detect a win condition along diagonals, an essential aspect of the game's winning criteria.

Scenario 4: Testing HasWon method for a player not winning

Details:
  TestName: TestHasWonForPlayerNotWinning
  Description: Ensure that the HasWon method returns false when a player has not won the game.
  Execution:
    Arrange: Set up a game board where no player has achieved a winning condition.
    Act: Invoke the HasWon method for any player.
    Assert: Check that the method returns false.
  Validation:
    Confirm that the method behaves correctly in scenarios where no player has successfully completed the win conditions.

Scenario 5: Testing HasWon method for an empty game board

Details:
  TestName: TestHasWonForEmptyGameBoard
  Description: Validate the behavior of the HasWon method on an empty game board.
  Execution:
    Arrange: Create a new game board with no player occupying any tiles.
    Act: Call the HasWon method for any player.
    Assert: Verify that the method returns false.
  Validation:
    Ensure that the method handles the case of an empty game board correctly, returning false as expected.


*/

// ********RoostGPT********
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    public class HasWonTest
    {
        private GameBoard gameBoard;

        [SetUp]
        public void Setup()
        {
            gameBoard = new GameBoard();
        }

        [Test]
        [Category("valid")]
        public void TestHasWonForPlayerWinningInRow()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(1, "X"), 0, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 0, 2);

            // Act
            bool result = gameBoard.HasWon(1);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        [Category("valid")]
        public void TestHasWonForPlayerWinningInColumn()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(2, "O"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 2, 0);

            // Act
            bool result = gameBoard.HasWon(2);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        [Category("valid")]
        public void TestHasWonForPlayerWinningInDiagonals()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(1, "X"), 1, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 2);

            // Act
            bool result = gameBoard.HasWon(1);

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        [Category("valid")]
        public void TestHasWonForPlayerNotWinning()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 0, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 0, 2);

            // Act
            bool result = gameBoard.HasWon(1);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void TestHasWonForEmptyGameBoard()
        {
            // Act
            bool result = gameBoard.HasWon(1);

            // Assert
            Assert.IsFalse(result);
        }
    }
}
