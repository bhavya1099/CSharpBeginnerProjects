// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=OccupyTile_93382c77ca
ROOST_METHOD_SIG_HASH=OccupyTile_992d29020a

   ########## Test-Scenarios ##########  

Scenario 1: Occupying an empty tile
Details:
  TestName: OccupyEmptyTile
  Description: Verify that when an empty tile is occupied by a player, the tile is marked with the player's ID and the PlayerOccupiedTile event is raised.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object.
  Act: Call the OccupyTile method of the GameBoard instance with the player and the coordinates of an empty tile.
  Assert: Verify that the tile at the specified coordinates is marked with the player's ID and that the PlayerOccupiedTile event is raised.
Validation:
  This test ensures that the OccupyTile method correctly updates the game board and raises the PlayerOccupiedTile event when an empty tile is occupied by a player.

Scenario 2: Occupying an already occupied tile
Details:
  TestName: OccupyOccupiedTile
  Description: Verify that when an already occupied tile is attempted to be occupied by a player, the method returns false and the tile is not updated.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object. Occupy a tile at the specified coordinates.
  Act: Call the OccupyTile method of the GameBoard instance with the player and the coordinates of the occupied tile.
  Assert: Verify that the method returns false and the tile at the specified coordinates is not updated.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when a player attempts to occupy an already occupied tile and returns false without updating the game board.

Scenario 3: Occupy all tiles
Details:
  TestName: OccupyAllTiles
  Description: Verify that when all the tiles on the game board are occupied, the method returns false.
Execution:
  Arrange: Create a new instance of the GameBoard class and two player objects. Occupy all the tiles on the game board.
  Act: Call the OccupyTile method of the GameBoard instance with one of the players and the coordinates of an empty tile.
  Assert: Verify that the method returns false.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when all the tiles on the game board are already occupied and returns false without updating the game board.

Scenario 4: Occupy tile out of bounds
Details:
  TestName: OccupyTileOutOfBounds
  Description: Verify that when attempting to occupy a tile with coordinates outside the game board boundaries, the method returns false.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object.
  Act: Call the OccupyTile method of the GameBoard instance with the player and coordinates outside the game board boundaries.
  Assert: Verify that the method returns false.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when attempting to occupy a tile with coordinates outside the game board boundaries and returns false without updating the game board.

Scenario 5: Occupy tile with negative coordinates
Details:
  TestName: OccupyTileWithNegativeCoordinates
  Description: Verify that when attempting to occupy a tile with negative coordinates, the method returns false.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object.
  Act: Call the OccupyTile method of the GameBoard instance with the player and negative coordinates.
  Assert: Verify that the method returns false.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when attempting to occupy a tile with negative coordinates and returns false without updating the game board.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;

namespace TicTacToe.Test
{
    [TestFixture]
    public class OccupyTileTest
    {
        [Test]
        [Category("valid")]
        public void OccupyEmptyTile()
        {
            // Arrange
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");

            // Act
            var result = gameBoard.OccupyTile(player, 0, 0);

            // Assert
            Assert.IsTrue(result);
            Assert.AreEqual(player.Id, gameBoard.GetTile(0, 0));
        }

        [Test]
        [Category("valid")]
        public void OccupyOccupiedTile()
        {
            // Arrange
            var gameBoard = new GameBoard();
            var player1 = new Player(1, "X");
            var player2 = new Player(2, "O");

            // Occupy a tile
            gameBoard.OccupyTile(player1, 0, 0);

            // Act
            var result = gameBoard.OccupyTile(player2, 0, 0);

            // Assert
            Assert.IsFalse(result);
            Assert.AreEqual(player1.Id, gameBoard.GetTile(0, 0));
        }

        [Test]
        [Category("valid")]
        public void OccupyAllTiles()
        {
            // Arrange
            var gameBoard = new GameBoard();
            var player1 = new Player(1, "X");
            var player2 = new Player(2, "O");

            // Occupy all tiles
            gameBoard.OccupyTile(player1, 0, 0);
            gameBoard.OccupyTile(player2, 0, 1);
            gameBoard.OccupyTile(player1, 0, 2);
            gameBoard.OccupyTile(player2, 1, 0);
            gameBoard.OccupyTile(player1, 1, 1);
            gameBoard.OccupyTile(player2, 1, 2);
            gameBoard.OccupyTile(player1, 2, 0);
            gameBoard.OccupyTile(player2, 2, 1);
            gameBoard.OccupyTile(player1, 2, 2);

            // Act
            var result = gameBoard.OccupyTile(player1, 1, 1);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void OccupyTileOutOfBounds()
        {
            // Arrange
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");

            // Act
            var result = gameBoard.OccupyTile(player, 3, 3);

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void OccupyTileWithNegativeCoordinates()
        {
            // Arrange
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");

            // Act
            var result = gameBoard.OccupyTile(player, -1, -1);

            // Assert
            Assert.IsFalse(result);
        }
    }
}
