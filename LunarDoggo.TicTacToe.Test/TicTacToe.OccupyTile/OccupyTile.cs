// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=OccupyTile_93382c77ca
ROOST_METHOD_SIG_HASH=OccupyTile_992d29020a

   ########## Test-Scenarios ##########  

Scenario 1: Occupying an empty tile
Details:
  TestName: OccupyEmptyTile
  Description: Verify that when an empty tile is occupied by a player, the tile is marked with the player's ID and the PlayerOccupiedTile event is raised.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object.
  Act: Call the OccupyTile method of the GameBoard instance with the player and the coordinates of an empty tile.
  Assert: Verify that the tile at the specified coordinates is marked with the player's ID and that the PlayerOccupiedTile event is raised.
Validation:
  This test ensures that the OccupyTile method correctly updates the game board and raises the PlayerOccupiedTile event when an empty tile is occupied by a player.

Scenario 2: Occupying an already occupied tile
Details:
  TestName: OccupyOccupiedTile
  Description: Verify that when an already occupied tile is attempted to be occupied by a player, the method returns false and the tile is not updated.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object. Occupy a tile at some coordinates with the player.
  Act: Call the OccupyTile method of the GameBoard instance with the player and the same coordinates as the occupied tile.
  Assert: Verify that the method returns false and the tile at the specified coordinates is not updated.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when a player attempts to occupy a tile that is already occupied, returning false and not updating the tile.

Scenario 3: Occupying a tile outside the board boundaries
Details:
  TestName: OccupyOutOfBoundsTile
  Description: Verify that when attempting to occupy a tile outside the boundaries of the game board, the method returns false and the tile is not updated.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object.
  Act: Call the OccupyTile method of the GameBoard instance with the player and coordinates that are outside the boundaries of the game board.
  Assert: Verify that the method returns false and no tile is updated.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when a player attempts to occupy a tile that is outside the boundaries of the game board, returning false and not updating any tile.

Scenario 4: Occupy all tiles on the board
Details:
  TestName: OccupyAllTiles
  Description: Verify that when all tiles on the game board are occupied by players, the method returns true and the game board is fully occupied.
Execution:
  Arrange: Create a new instance of the GameBoard class and two player objects. Occupy all tiles on the game board with the two players.
  Act: Call the OccupyTile method of the GameBoard instance with the players and the coordinates of the remaining empty tiles.
  Assert: Verify that the method returns true and all tiles on the game board are occupied by players.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when all tiles on the game board are occupied by players, returning true and fully occupying the game board.

Scenario 5: Verify PlayerOccupiedTile event is raised
Details:
  TestName: PlayerOccupiedTileEventRaised
  Description: Verify that when a player occupies an empty tile, the PlayerOccupiedTile event is raised with the correct player and tile coordinates.
Execution:
  Arrange: Create a new instance of the GameBoard class, a player object, and subscribe to the PlayerOccupiedTile event.
  Act: Call the OccupyTile method of the GameBoard instance with the player and the coordinates of an empty tile.
  Assert: Verify that the PlayerOccupiedTile event is raised with the correct player and tile coordinates.
Validation:
  This test ensures that the OccupyTile method correctly raises the PlayerOccupiedTile event with the correct player and tile coordinates when a player occupies an empty tile.

Scenario 6: Verify return value when tile is already occupied
Details:
  TestName: OccupyOccupiedTileReturnValue
  Description: Verify that when a player attempts to occupy an already occupied tile, the method returns false.
Execution:
  Arrange: Create a new instance of the GameBoard class, a player object, and occupy a tile at some coordinates with the player.
  Act: Call the OccupyTile method of the GameBoard instance with the player and the same coordinates as the occupied tile.
  Assert: Verify that the method returns false.
Validation:
  This test ensures that the OccupyTile method correctly returns false when a player attempts to occupy a tile that is already occupied.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using TicTacToe.Test;

namespace TicTacToe.Test
{
    [TestFixture]
    public class OccupyTileTest
    {
        [Test]
        [Category("valid")]
        public void OccupyEmptyTile()
        {
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");
            var eventRaised = false;

            gameBoard.PlayerOccupiedTile += (sender, args) =>
            {
                eventRaised = true;
            };

            var result = gameBoard.OccupyTile(player, 0, 0);

            Assert.IsTrue(result);
            Assert.AreEqual(player.Id, gameBoard.tiles[0, 0]);
            Assert.IsTrue(eventRaised);
        }

        [Test]
        [Category("valid")]
        public void OccupyOccupiedTile()
        {
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");
            gameBoard.OccupyTile(player, 0, 0);

            var result = gameBoard.OccupyTile(player, 0, 0);

            Assert.IsFalse(result);
            Assert.AreEqual(player.Id, gameBoard.tiles[0, 0]);
        }

        [Test]
        [Category("valid")]
        public void OccupyOutOfBoundsTile()
        {
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");

            var result = gameBoard.OccupyTile(player, 3, 3);

            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void OccupyAllTiles()
        {
            var gameBoard = new GameBoard();
            var player1 = new Player(1, "X");
            var player2 = new Player(2, "O");

            for (int x = 0; x < 2; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    gameBoard.OccupyTile(player1, x, y);
                }
            }

            var result = gameBoard.OccupyTile(player2, 2, 2);

            Assert.IsTrue(result);
            Assert.AreEqual(player2.Id, gameBoard.tiles[2, 2]);
            Assert.IsTrue(gameBoard.AreAllFieldsOccupied());
        }

        [Test]
        [Category("valid")]
        public void PlayerOccupiedTileEventRaised()
        {
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");
            var eventRaised = false;

            gameBoard.PlayerOccupiedTile += (sender, args) =>
            {
                eventRaised = true;
                Assert.AreEqual(player, args.Player);
                Assert.AreEqual(0, args.TileX);
                Assert.AreEqual(0, args.TileY);
            };

            gameBoard.OccupyTile(player, 0, 0);

            Assert.IsTrue(eventRaised);
        }

        [Test]
        [Category("valid")]
        public void OccupyOccupiedTileReturnValue()
        {
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");
            gameBoard.OccupyTile(player, 0, 0);

            var result = gameBoard.OccupyTile(player, 0, 0);

            Assert.IsFalse(result);
        }
    }
}
