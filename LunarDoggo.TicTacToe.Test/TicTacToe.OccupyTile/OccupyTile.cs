// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=OccupyTile_93382c77ca
ROOST_METHOD_SIG_HASH=OccupyTile_992d29020a

   ########## Test-Scenarios ##########  

Scenario 1: Occupying an empty tile
Details:
  TestName: OccupyEmptyTile
  Description: Verify that when an empty tile is occupied by a player, the tile is marked with the player's ID and the PlayerOccupiedTile event is raised.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object.
  Act: Call the OccupyTile method of the GameBoard instance with the player and the coordinates of an empty tile.
  Assert: Verify that the tile at the specified coordinates is marked with the player's ID and that the PlayerOccupiedTile event is raised.
Validation:
  This test ensures that the OccupyTile method correctly updates the game board and raises the PlayerOccupiedTile event when an empty tile is occupied by a player.

Scenario 2: Occupying an already occupied tile
Details:
  TestName: OccupyOccupiedTile
  Description: Verify that when an already occupied tile is attempted to be occupied by a player, the method returns false and the tile is not updated.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object. Occupy a tile at some coordinates with the player.
  Act: Call the OccupyTile method of the GameBoard instance with the player and the same coordinates as the occupied tile.
  Assert: Verify that the method returns false and the tile at the specified coordinates is not updated.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when a player attempts to occupy a tile that is already occupied, returning false and not updating the tile.

Scenario 3: Occupying a tile outside the board boundaries
Details:
  TestName: OccupyOutOfBoundsTile
  Description: Verify that when attempting to occupy a tile outside the boundaries of the game board, the method returns false and the tile is not updated.
Execution:
  Arrange: Create a new instance of the GameBoard class and a player object.
  Act: Call the OccupyTile method of the GameBoard instance with the player and coordinates that are outside the boundaries of the game board.
  Assert: Verify that the method returns false and no tile is updated.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when a player attempts to occupy a tile that is outside the boundaries of the game board, returning false and not updating any tile.

Scenario 4: Occupy all tiles on the board
Details:
  TestName: OccupyAllTiles
  Description: Verify that when all tiles on the game board are occupied by players, the method returns true.
Execution:
  Arrange: Create a new instance of the GameBoard class and two player objects. Occupy all tiles on the game board with alternating players.
  Act: Call the OccupyTile method of the GameBoard instance with the player and coordinates of each tile on the game board.
  Assert: Verify that the method returns true for each call.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when all tiles on the game board are occupied by players, returning true for each call.

Scenario 5: Occupy tiles to win the game
Details:
  TestName: OccupyToWin
  Description: Verify that when a player occupies tiles in a winning pattern, the method returns true.
Execution:
  Arrange: Create a new instance of the GameBoard class and two player objects. Occupy tiles in a winning pattern with one of the players.
  Act: Call the OccupyTile method of the GameBoard instance with the player and coordinates of the tiles in the winning pattern.
  Assert: Verify that the method returns true for each call.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when a player occupies tiles in a winning pattern, returning true for each call.

Scenario 6: Occupy tiles to create a draw
Details:
  TestName: OccupyToDraw
  Description: Verify that when all tiles on the game board are occupied by players and no player has won, the method returns true.
Execution:
  Arrange: Create a new instance of the GameBoard class and two player objects. Occupy all tiles on the game board with alternating players in a pattern that does not result in a win.
  Act: Call the OccupyTile method of the GameBoard instance with the player and coordinates of each tile on the game board.
  Assert: Verify that the method returns true for each call.
Validation:
  This test ensures that the OccupyTile method correctly handles the case when all tiles on the game board are occupied by players and no player has won, returning true for each call.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;

namespace TicTacToe.Test
{
    [TestFixture]
    public class OccupyTileTest
    {
        private GameBoard gameBoard;
        private Player player;

        [SetUp]
        public void Setup()
        {
            gameBoard = new GameBoard();
            player = new Player(1, "X");
        }

        [Test, Category("valid")]
        public void OccupyEmptyTile()
        {
            // Arrange
            int x = 0;
            int y = 0;
            bool eventRaised = false;

            gameBoard.PlayerOccupiedTile += (sender, args) =>
            {
                eventRaised = true;
                Assert.AreEqual(player, args.Player);
                Assert.AreEqual(x, args.TileX);
                Assert.AreEqual(y, args.TileY);
            };

            // Act
            bool result = gameBoard.OccupyTile(player, x, y);

            // Assert
            Assert.IsTrue(result);
            Assert.IsTrue(eventRaised);
            Assert.AreEqual(player.Id, gameBoard.GetTile(x, y));
        }

        [Test, Category("valid")]
        public void OccupyOccupiedTile()
        {
            // Arrange
            int x = 0;
            int y = 0;
            gameBoard.OccupyTile(player, x, y);

            // Act
            bool result = gameBoard.OccupyTile(player, x, y);

            // Assert
            Assert.IsFalse(result);
            Assert.AreEqual(player.Id, gameBoard.GetTile(x, y));
        }

        [Test, Category("valid")]
        public void OccupyOutOfBoundsTile()
        {
            // Arrange
            int x = -1;
            int y = 0;

            // Act
            bool result = gameBoard.OccupyTile(player, x, y);

            // Assert
            Assert.IsFalse(result);
        }

        [Test, Category("valid")]
        public void OccupyAllTiles()
        {
            // Arrange
            bool[] eventRaised = new bool[9];
            int eventCount = 0;
            gameBoard.PlayerOccupiedTile += (sender, args) =>
            {
                eventRaised[eventCount] = true;
                eventCount++;
            };

            // Act
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    bool result = gameBoard.OccupyTile(player, x, y);

                    // Assert
                    Assert.IsTrue(result);
                    Assert.AreEqual(player.Id, gameBoard.GetTile(x, y));
                }
            }

            // Assert
            Assert.AreEqual(9, eventCount);
            for (int i = 0; i < 9; i++)
            {
                Assert.IsTrue(eventRaised[i]);
            }
        }

        [Test, Category("valid")]
        public void OccupyToWin()
        {
            // Arrange
            gameBoard.OccupyTile(player, 0, 0);
            gameBoard.OccupyTile(player, 0, 1);
            bool eventRaised = false;
            gameBoard.PlayerOccupiedTile += (sender, args) =>
            {
                eventRaised = true;
            };

            // Act
            bool result = gameBoard.OccupyTile(player, 0, 2);

            // Assert
            Assert.IsTrue(result);
            Assert.IsTrue(eventRaised);
            Assert.AreEqual(player.Id, gameBoard.GetTile(0, 2));
        }

        [Test, Category("valid")]
        public void OccupyToDraw()
        {
            // Arrange
            gameBoard.OccupyTile(player, 0, 0);
            gameBoard.OccupyTile(player, 0, 1);
            gameBoard.OccupyTile(player, 1, 0);
            gameBoard.OccupyTile(player, 1, 1);
            gameBoard.OccupyTile(player, 2, 0);
            gameBoard.OccupyTile(player, 2, 1);
            bool eventRaised = false;
            gameBoard.PlayerOccupiedTile += (sender, args) =>
            {
                eventRaised = true;
            };

            // Act
            bool result = gameBoard.OccupyTile(player, 2, 2);

            // Assert
            Assert.IsTrue(result);
            Assert.IsTrue(eventRaised);
            Assert.AreEqual(player.Id, gameBoard.GetTile(2, 2));
        }
    }
}
