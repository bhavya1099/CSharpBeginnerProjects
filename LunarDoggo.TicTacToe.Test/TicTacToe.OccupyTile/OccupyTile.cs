// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=OccupyTile_93382c77ca
ROOST_METHOD_SIG_HASH=OccupyTile_992d29020a

   ########## Test-Scenarios ##########  

Scenario 1: Test to check if the OccupyTile method correctly assigns a tile to a player.

Details:
    TestName: TestOccupyTileAssignsTileToPlayer.
    Description: This test is meant to check if the OccupyTile method correctly assigns a tile to a player when the tile is not already occupied.
Execution:
    Arrange: Create a Player instance and the GameBoard instance.
    Act: Call the OccupyTile method with the player instance and valid x, y coordinates.
    Assert: Check if the tile is now occupied by the player.
Validation:
    The assertion verifies that the OccupyTile method correctly assigns the tile to the player. It's significant in the context of the game rules, as players should be able to occupy unoccupied tiles.

Scenario 2: Test to check if the OccupyTile method returns false when trying to occupy an already occupied tile.

Details:
    TestName: TestOccupyTileReturnsFalseForOccupiedTile.
    Description: This test is meant to check if the OccupyTile method returns false when a player tries to occupy a tile that is already occupied.
Execution:
    Arrange: Create a Player instance, occupy a tile on the GameBoard.
    Act: Call the OccupyTile method with the player instance and the coordinates of the already occupied tile.
    Assert: Check if the method returns false.
Validation:
    The assertion verifies that the OccupyTile method correctly handles the scenario where a player tries to occupy an already occupied tile. It's significant in the context of the game rules, as players should not be able to occupy a tile that is already occupied.

Scenario 3: Test to check if the OccupyTile method triggers the PlayerOccupiedTile event.

Details:
    TestName: TestOccupyTileTriggersPlayerOccupiedTileEvent.
    Description: This test is meant to check if the OccupyTile method triggers the PlayerOccupiedTile event when a player successfully occupies a tile.
Execution:
    Arrange: Create a Player instance, subscribe to the PlayerOccupiedTile event of the GameBoard.
    Act: Call the OccupyTile method with the player instance and valid x, y coordinates.
    Assert: Check if the PlayerOccupiedTile event was triggered.
Validation:
    The assertion verifies that the OccupyTile method correctly triggers the PlayerOccupiedTile event when a player successfully occupies a tile. It's significant in the context of application behavior as it's important to keep track of game events. 

Scenario 4: Test to check if the OccupyTile method handles invalid x, y coordinates.

Details:
    TestName: TestOccupyTileHandlesInvalidCoordinates.
    Description: This test is meant to check if the OccupyTile method correctly handles scenarios where the provided x, y coordinates are invalid (out of the game board's range).
Execution:
    Arrange: Create a Player instance.
    Act: Call the OccupyTile method with the player instance and invalid x, y coordinates.
    Assert: Check if an appropriate exception is thrown.
Validation:
    The assertion verifies that the OccupyTile method correctly throws an exception when provided with invalid x, y coordinates. It's significant in the context of error handling, as the method should not allow operations outside the game board's range.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using Moq;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class OccupyTileTest
    {
        private GameBoard gameBoard;
        private Player player;

        [SetUp]
        public void SetUp()
        {
            gameBoard = new GameBoard();
            player = new Player(1, "X");
        }

        [Test, Category("valid")]
        public void TestOccupyTileAssignsTileToPlayer()
        {
            int x = 1;
            int y = 1;

            bool result = gameBoard.OccupyTile(player, x, y);

            Assert.IsTrue(result, "The tile should be assigned to the player.");
        }

        [Test, Category("invalid")]
        public void TestOccupyTileReturnsFalseForOccupiedTile()
        {
            int x = 1;
            int y = 1;

            gameBoard.OccupyTile(player, x, y);

            bool result = gameBoard.OccupyTile(player, x, y);

            Assert.IsFalse(result, "The method should return false when trying to occupy an already occupied tile.");
        }

        [Test, Category("valid")]
        public void TestOccupyTileTriggersPlayerOccupiedTileEvent()
        {
            int x = 1;
            int y = 1;

            bool eventTriggered = false;
            gameBoard.PlayerOccupiedTile += (s, e) => eventTriggered = true;

            gameBoard.OccupyTile(player, x, y);

            Assert.IsTrue(eventTriggered, "The PlayerOccupiedTile event should be triggered.");
        }

        [Test, Category("invalid")]
        public void TestOccupyTileHandlesInvalidCoordinates()
        {
            int x = -1;
            int y = -1;

            Assert.Throws<IndexOutOfRangeException>(() => gameBoard.OccupyTile(player, x, y), "The method should throw an exception when provided with invalid coordinates.");
        }
    }
}
