// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=StartGame_ea5458875f
ROOST_METHOD_SIG_HASH=StartGame_941d5801f0

   ########## Test-Scenarios ##########  

Scenario 1: Test to validate successful game start

Details:
  TestName: TestSuccessfulGameStart
  Description: This test is meant to check whether the game starts successfully and all the necessary initializations are done correctly.

Execution:
  Arrange: Mock the required dependencies and set the necessary initial data.
  Act: Invoke the StartGame method.
  Assert: Verify that the currentPlayer is set to firstPlayer, gameBoard is reset and TilesReset event is invoked.

Validation:
  The assertion verifies that the game is initialized correctly and ready to play. It is significant in the context of game rules and functionality.

Scenario 2: Test to validate gameBoard reset

Details:
  TestName: TestGameBoardResetOnStart
  Description: This test is meant to check whether the gameBoard is reset when the game starts.

Execution:
  Arrange: Mock the required dependencies and set the necessary initial data.
  Act: Invoke the StartGame method.
  Assert: Verify that the gameBoard.Reset() method is called.

Validation:
  The assertion verifies that each game start resets the gameBoard which is crucial for starting a new game.

Scenario 3: Test to validate TilesReset event invocation

Details:
  TestName: TestTilesResetEventInvocationOnStart
  Description: This test is meant to check whether the TilesReset event is invoked when the game starts.

Execution:
  Arrange: Mock the required dependencies and set the necessary initial data.
  Act: Invoke the StartGame method.
  Assert: Verify that the TilesReset event is invoked.

Validation:
  The assertion verifies that the TilesReset event is triggered on each game start, which is crucial for resetting the UI elements.

Scenario 4: Test to validate currentPlayer set to firstPlayer

Details:
  TestName: TestCurrentPlayerSetToFirstPlayerOnStart
  Description: This test is meant to check whether the currentPlayer is set to firstPlayer when the game starts.

Execution:
  Arrange: Mock the required dependencies and set the necessary initial data.
  Act: Invoke the StartGame method.
  Assert: Verify that the currentPlayer is set to firstPlayer.

Validation:
  The assertion verifies that the currentPlayer is set to firstPlayer on each game start, which is crucial for ensuring the correct order of play.


*/

// ********RoostGPT********
using System.Linq;
using System;
using NUnit.Framework;
using Moq;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class StartGameTest
    {
        private Mock<GameBoard> gameBoardMock;
        private Player firstPlayer;
        private Player secondPlayer;
        private GameState gameState;

        [SetUp]
        public void Setup()
        {
            gameBoardMock = new Mock<GameBoard>();
            firstPlayer = new Player(1, "X");
            secondPlayer = new Player(2, "O");
            gameState = new GameState(new ButtonTileMapping[0])
            {
                gameBoard = gameBoardMock.Object,
                firstPlayer = firstPlayer,
                secondPlayer = secondPlayer
            };
        }

        [Test, Category("valid")]
        public void TestSuccessfulGameStart()
        {
            bool isTilesResetEventInvoked = false;
            gameState.TilesReset += (sender, e) => isTilesResetEventInvoked = true;

            gameState.StartGame();

            Assert.AreEqual(firstPlayer, gameState.currentPlayer);
            gameBoardMock.Verify(g => g.Reset(), Times.Once);
            Assert.IsTrue(isTilesResetEventInvoked);
        }

        [Test, Category("valid")]
        public void TestGameBoardResetOnStart()
        {
            gameState.StartGame();

            gameBoardMock.Verify(g => g.Reset(), Times.Once);
        }

        [Test, Category("valid")]
        public void TestTilesResetEventInvocationOnStart()
        {
            bool isTilesResetEventInvoked = false;
            gameState.TilesReset += (sender, e) => isTilesResetEventInvoked = true;

            gameState.StartGame();

            Assert.IsTrue(isTilesResetEventInvoked);
        }

        [Test, Category("valid")]
        public void TestCurrentPlayerSetToFirstPlayerOnStart()
        {
            gameState.StartGame();

            Assert.AreEqual(firstPlayer, gameState.currentPlayer);
        }
    }
}
