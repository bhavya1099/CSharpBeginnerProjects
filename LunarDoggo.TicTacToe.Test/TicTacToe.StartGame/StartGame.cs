// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=StartGame_ea5458875f
ROOST_METHOD_SIG_HASH=StartGame_941d5801f0

   ########## Test-Scenarios ##########  

Scenario 1: StartGame method successfully resets the game state

Details:
  TestName: StartGame_ResetsGame
  Description: This test checks whether the StartGame method resets the game state by setting the current player to the first player and resetting the game board.
Execution:
  Arrange: Create an instance of the GameState class with a valid array of ButtonTileMapping objects.
  Act: Call the StartGame method.
  Assert: Verify that the current player is set to the first player and the game board is reset.
Validation:
  This test ensures that the StartGame method functions correctly by resetting the game state before starting a new game.

Scenario 2: StartGame method triggers the TilesReset event

Details:
  TestName: StartGame_TriggersTilesResetEvent
  Description: This test checks whether the StartGame method triggers the TilesReset event after resetting the game board.
Execution:
  Arrange: Create an instance of the GameState class with a valid array of ButtonTileMapping objects.
  Act: Call the StartGame method.
  Assert: Verify that the TilesReset event is triggered.
Validation:
  This test verifies that the StartGame method properly triggers the TilesReset event, allowing any subscribed event handlers to perform necessary actions.

Scenario 3: StartGame method sets the current player to the first player

Details:
  TestName: StartGame_SetsCurrentPlayerToFirstPlayer
  Description: This test checks whether the StartGame method sets the current player to the first player before starting a new game.
Execution:
  Arrange: Create an instance of the GameState class with a valid array of ButtonTileMapping objects.
  Act: Call the StartGame method.
  Assert: Verify that the current player is set to the first player.
Validation:
  This test ensures that the StartGame method correctly sets the current player to the first player, ensuring that the first player starts the game.

Scenario 4: StartGame method does not trigger any events when called multiple times without occupation of tiles

Details:
  TestName: StartGame_NoEventsWhenCalledMultipleTimesWithoutOccupation
  Description: This test checks whether the StartGame method does not trigger any events when called multiple times without any occupation of tiles.
Execution:
  Arrange: Create an instance of the GameState class with a valid array of ButtonTileMapping objects.
  Act: Call the StartGame method multiple times without occupying any tiles.
  Assert: Verify that no events are triggered.
Validation:
  This test ensures that the StartGame method does not trigger any events when called multiple times consecutively without any occupation of tiles, preventing any unintended behavior.

Scenario 5: StartGame method triggers the GameOverDraw event when all tiles are occupied without a winner

Details:
  TestName: StartGame_TriggersGameOverDrawEventWhenAllTilesOccupied
  Description: This test checks whether the StartGame method triggers the GameOverDraw event when all tiles are occupied without a winner.
Execution:
  Arrange: Create an instance of the GameState class with a valid array of ButtonTileMapping objects.
  Act: Occupy all tiles without a winning condition.
  Assert: Verify that the GameOverDraw event is triggered.
Validation:
  This test verifies that the StartGame method correctly triggers the GameOverDraw event when all tiles are occupied without a winning condition, indicating a draw.

Scenario 6: StartGame method triggers the GameOverPlayerWon event when a player wins the game

Details:
  TestName: StartGame_TriggersGameOverPlayerWonEventWhenPlayerWins
  Description: This test checks whether the StartGame method triggers the GameOverPlayerWon event when a player wins the game.
Execution:
  Arrange: Create an instance of the GameState class with a valid array of ButtonTileMapping objects.
  Act: Occupy tiles to create a winning condition for a player.
  Assert: Verify that the GameOverPlayerWon event is triggered.
Validation:
  This test ensures that the StartGame method properly triggers the GameOverPlayerWon event when a player wins the game, allowing any subscribed event handlers to perform necessary actions.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using System.Linq;
using TicTacToe.Test;
using System.Windows.Forms;

namespace TicTacToe.Test
{
    [TestFixture]
    public class StartGameTest
    {
        private GameState gameState;

        [SetUp]
        public void SetUp()
        {
            ButtonTileMapping[] buttonTileMappings = new ButtonTileMapping[]
            {
                new ButtonTileMapping(new Button(), 0, 0),
                new ButtonTileMapping(new Button(), 1, 0),
                new ButtonTileMapping(new Button(), 2, 0),
                new ButtonTileMapping(new Button(), 0, 1),
                new ButtonTileMapping(new Button(), 1, 1),
                new ButtonTileMapping(new Button(), 2, 1),
                new ButtonTileMapping(new Button(), 0, 2),
                new ButtonTileMapping(new Button(), 1, 2),
                new ButtonTileMapping(new Button(), 2, 2),
            };

            gameState = new GameState(buttonTileMappings);
        }

        [Test]
        [Category("valid")]
        public void StartGame_ResetsGame()
        {
            // Arrange
            gameState.OccupyTile(gameState.ButtonTileMappings[0]);

            // Act
            gameState.StartGame();

            // Assert
            Assert.AreEqual(gameState.FirstPlayer, gameState.CurrentPlayer);
            Assert.IsTrue(gameState.GameBoard.IsEmpty());
        }

        [Test]
        [Category("valid")]
        public void StartGame_TriggersTilesResetEvent()
        {
            // Arrange
            bool eventTriggered = false;
            gameState.TilesReset += (sender, args) => eventTriggered = true;

            // Act
            gameState.StartGame();

            // Assert
            Assert.IsTrue(eventTriggered);
        }

        [Test]
        [Category("valid")]
        public void StartGame_SetsCurrentPlayerToFirstPlayer()
        {
            // Arrange
            gameState.OccupyTile(gameState.ButtonTileMappings[0]);

            // Act
            gameState.StartGame();

            // Assert
            Assert.AreEqual(gameState.FirstPlayer, gameState.CurrentPlayer);
        }

        [Test]
        [Category("valid")]
        public void StartGame_NoEventsWhenCalledMultipleTimesWithoutOccupation()
        {
            // Arrange
            bool eventTriggered = false;
            gameState.TilesReset += (sender, args) => eventTriggered = true;

            // Act
            gameState.StartGame();
            gameState.StartGame();

            // Assert
            Assert.IsFalse(eventTriggered);
        }

        [Test]
        [Category("valid")]
        public void StartGame_TriggersGameOverDrawEventWhenAllTilesOccupied()
        {
            // Arrange
            bool eventTriggered = false;
            gameState.GameOverDraw += (sender, args) => eventTriggered = true;

            // Act
            gameState.OccupyTile(gameState.ButtonTileMappings[0]);
            gameState.OccupyTile(gameState.ButtonTileMappings[1]);
            gameState.OccupyTile(gameState.ButtonTileMappings[2]);
            gameState.OccupyTile(gameState.ButtonTileMappings[3]);
            gameState.OccupyTile(gameState.ButtonTileMappings[4]);
            gameState.OccupyTile(gameState.ButtonTileMappings[5]);
            gameState.OccupyTile(gameState.ButtonTileMappings[6]);
            gameState.OccupyTile(gameState.ButtonTileMappings[7]);
            gameState.OccupyTile(gameState.ButtonTileMappings[8]);

            // Assert
            Assert.IsTrue(eventTriggered);
        }

        [Test]
        [Category("valid")]
        public void StartGame_TriggersGameOverPlayerWonEventWhenPlayerWins()
        {
            // Arrange
            bool eventTriggered = false;
            gameState.GameOverPlayerWon += (sender, args) => eventTriggered = true;

            // Act
            gameState.OccupyTile(gameState.ButtonTileMappings[0]);
            gameState.OccupyTile(gameState.ButtonTileMappings[1]);
            gameState.OccupyTile(gameState.ButtonTileMappings[3]);
            gameState.OccupyTile(gameState.ButtonTileMappings[4]);
            gameState.OccupyTile(gameState.ButtonTileMappings[6]);

            // Assert
            Assert.IsTrue(eventTriggered);
        }
    }
}
