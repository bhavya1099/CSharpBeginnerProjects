// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=StartGame_ea5458875f
ROOST_METHOD_SIG_HASH=StartGame_941d5801f0

   ########## Test-Scenarios ##########  

Scenario 1: StartGame Resets Current Player to First Player

Details:
  TestName: StartGameResetsCurrentPlayerToFirstPlayer
  Description: Validates that when StartGame is called, the currentPlayer is reset to the value of firstPlayer.
Execution:
  Arrange: Create an instance of GameState and set currentPlayer to secondPlayer.
  Act: Call the StartGame method.
  Assert: Assert that the currentPlayer is now set to firstPlayer.
Validation:
  This assertion confirms that the game starts with the correct initial player every time, aligning with game rules that may designate the first player to always start.

Scenario 2: StartGame Resets Game Board

Details:
  TestName: StartGameResetsGameBoard
  Description: Ensures that the StartGame method correctly calls the Reset method on the gameBoard to clear any game state from a previous round.
Execution:
  Arrange: Create a mock of GameBoard with initial state (not empty) and GameState.
  Act: Call the StartGame method.
  Assert: Verify that Reset method was called on the gameBoard.
Validation:
  It verifies that the game board is reset to its initial state ensuring fairness and correctness for a new game round.

Scenario 3: StartGame Triggers TilesReset Event When Called

Details:
  TestName: StartGameTriggersTilesResetEvent
  Description: Checks if the TilesReset event is triggered upon the call to StartGame, which is crucial for external event handlers managing game state.
Execution:
  Arrange: Create an instance of GameState, and subscribe to the TilesReset event with a handler that sets a flag or captures some data.
  Act: Call StartGame.
  Assert: Check that the event handler was invoked.
Validation:
  This makes sure any linked UI or external systems handling this event can reset or update their views accordingly, keeping the UI in sync with the game state.

Scenario 4: StartGame Does Not Trigger TilesReset Event If Not Subscribed

Details:
  TestName: StartGameDoesNotTriggerTilesResetIfNotSubscribed
  Description: Ensures that if no subscription is made to the TilesReset event, no action is taken. Important for scenarios with optional event handling.
Execution:
  Arrange: Create an instance of GameState without subscribing to TilesReset.
  Act: Call StartGame.
  Assert: Confirm that with no subscription, no side-effects or exceptions occur.
Validation:
  This case tests the resilience and safety of the event invocation process in GameState, ensuring that events do not cause errors when unhandled.

Scenario 5: StartGame Resets Game for Multiple Sequential Calls

Details:
  TestName: StartGameResetsGameForMultipleCalls
  Description: Ensures that calling StartGame multiple times consecutively resets the game state each time without error or misbehaving state.
Execution:
  Arrange: Create an instance of GameState, play a partial game to alter state, and call StartGame multiple times.
  Act: Call StartGame twice consecutively.
  Assert: Confirm each call resets the game as expected and no corrupt state is carried over.
Validation:
  Ensures the method's reliability and idempotenceâ€”repeated invocations produce the same state initialization, crucial for game restarts during testing or actual gameplay.


*/

// ********RoostGPT********
using NUnit.Framework;
using Moq;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class StartGameTest
    {
        private GameState gameState;
        private Mock<GameBoard> mockGameBoard;
        private Player firstPlayer;
        private Player secondPlayer;

        [SetUp]
        public void SetUp()
        {
            firstPlayer = new Player(1, "X");
            secondPlayer = new Player(2, "O");
            mockGameBoard = new Mock<GameBoard>();
            gameState = new GameState(new ButtonTileMapping[] {})
            {
                CurrentPlayer = secondPlayer,
                FirstPlayer = firstPlayer,
                SecondPlayer = secondPlayer,
                GameBoard = mockGameBoard.Object
            };
        }

        [Test, Category("valid")]
        public void StartGameResetsCurrentPlayerToFirstPlayer()
        {
            gameState.StartGame();
            Assert.AreEqual(firstPlayer, gameState.CurrentPlayer);
        }

        [Test, Category("valid")]
        public void StartGameResetsGameBoard()
        {
            mockGameBoard.Setup(board => board.Reset());
            gameState.StartGame();
            mockGameBoard.Verify(board => board.Reset(), Times.Once());
        }

        [Test, Category("valid")]
        public void StartGameTriggersTilesResetEvent()
        {
            bool eventFired = false;
            gameState.TilesReset += (sender, args) => eventFired = true;

            gameState.StartGame();

            Assert.IsTrue(eventFired);
        }

        [Test, Category("boundary")]
        public void StartGameDoesNotTriggerTilesResetIfNotSubscribed()
        {
            bool eventFired = false;

            gameState.StartGame();

            Assert.IsFalse(eventFired);
        }

        [Test, Category("valid")]
        public void StartGameResetsGameForMultipleCalls()
        {
            mockGameBoard.Setup(board => board.Reset());

            gameState.StartGame(); // First call
            gameState.CurrentPlayer = secondPlayer;
            gameState.StartGame(); // Second call

            mockGameBoard.Verify(board => board.Reset(), Times.Exactly(2));
            Assert.AreEqual(firstPlayer, gameState.CurrentPlayer);
        }
    }
}
