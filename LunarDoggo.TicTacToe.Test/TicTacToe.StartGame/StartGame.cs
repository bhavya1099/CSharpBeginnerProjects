// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=StartGame_ea5458875f
ROOST_METHOD_SIG_HASH=StartGame_941d5801f0

   ########## Test-Scenarios ##########  


### Scenario 1: StartGame Method - Successful Game Start
Details:
- TestName: StartGameSuccessfulGameStart
- Description: Verify that the game starts successfully by setting the current player, resetting the game board, and invoking the TilesReset event.
Execution:
- Arrange: Initialize the game state object with valid button tile mappings.
- Act: Call the StartGame method.
- Assert: Check if the current player is set to the first player, the game board is reset, and the TilesReset event is invoked.
Validation:
- This test ensures that the game initialization process functions correctly, setting up the game for the players to start playing.

### Scenario 2: StartGame Method - TilesReset Event Handling
Details:
- TestName: StartGameTilesResetEventHandling
- Description: Validate that the TilesReset event is correctly handled after calling the StartGame method.
Execution:
- Arrange: Prepare the game state object with valid button tile mappings.
- Act: Trigger the StartGame method.
- Assert: Verify if the TilesReset event is raised.
Validation:
- This test confirms that the TilesReset event is triggered as expected, indicating a successful game initialization.

### Scenario 3: StartGame Method - Incorrect Game Start
Details:
- TestName: StartGameIncorrectGameStart
- Description: Check the behavior when the game start method is called with invalid or null button tile mappings.
Execution:
- Arrange: Initialize the game state object with null button tile mappings.
- Act: Invoke the StartGame method.
- Assert: Ensure that an exception is thrown or the method handles null mappings appropriately.
Validation:
- This test ensures that the StartGame method handles edge cases where button tile mappings are missing or invalid.

### Scenario 4: StartGame Method - Multiple Game Start Calls
Details:
- TestName: StartGameMultipleCalls
- Description: Test the behavior when the StartGame method is called multiple times consecutively.
Execution:
- Arrange: Set up the game state object with valid button tile mappings.
- Act: Call the StartGame method twice in a row.
- Assert: Verify that the game state is reset correctly each time the method is called.
Validation:
- This test confirms that repeated calls to StartGame do not cause unexpected behavior and that the game is reset before each new game starts.

### Scenario 5: StartGame Method - Player Initialization
Details:
- TestName: StartGamePlayerInitialization
- Description: Ensure that the current player is correctly set to the first player after starting the game.
Execution:
- Arrange: Initialize the game state object with valid button tile mappings.
- Act: Trigger the StartGame method.
- Assert: Check if the current player is the first player.
Validation:
- This test validates that the game starts with the correct player and sets the initial state for the game.

These scenarios cover various aspects of the StartGame method, including initialization, event handling, error scenarios, and multiple calls to the method.


*/

// ********RoostGPT********
using System;
using System.Linq;
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    public class StartGameTest
    {
        private GameState gameState;

        [SetUp]
        public void Setup()
        {
            ButtonTileMapping[] buttonTileMappings = new ButtonTileMapping[]
            {
                new ButtonTileMapping(new System.Windows.Controls.Button(), 0, 0),
                new ButtonTileMapping(new System.Windows.Controls.Button(), 1, 0),
                new ButtonTileMapping(new System.Windows.Controls.Button(), 2, 0)
            };
            gameState = new GameState(buttonTileMappings);
        }

        [Test, Category("valid")]
        public void StartGameSuccessfulGameStart()
        {
            gameState.StartGame();

            Assert.AreEqual(gameState.firstPlayer, gameState.currentPlayer);
            Assert.IsTrue(gameState.gameBoard.IsBoardEmpty());
        }

        [Test, Category("valid")]
        public void StartGameTilesResetEventHandling()
        {
            bool eventRaised = false;
            gameState.TilesReset += (sender, args) => { eventRaised = true; };

            gameState.StartGame();

            Assert.IsTrue(eventRaised);
        }

        [Test, Category("invalid")]
        public void StartGameIncorrectGameStart()
        {
            ButtonTileMapping[] nullMappings = null;
            GameState gameStateWithNullMappings = new GameState(nullMappings);

            Assert.Throws<NullReferenceException>(() => gameStateWithNullMappings.StartGame());
        }

        [Test, Category("valid")]
        public void StartGameMultipleCalls()
        {
            gameState.StartGame();
            Player initialPlayer = gameState.currentPlayer;

            gameState.StartGame();

            Assert.AreNotEqual(initialPlayer, gameState.currentPlayer);
            Assert.IsTrue(gameState.gameBoard.IsBoardEmpty());
        }

        [Test, Category("valid")]
        public void StartGamePlayerInitialization()
        {
            gameState.StartGame();

            Assert.AreEqual(gameState.firstPlayer, gameState.currentPlayer);
        }
    }
}
