// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=StartGame_ea5458875f
ROOST_METHOD_SIG_HASH=StartGame_941d5801f0

   ########## Test-Scenarios ##########  

Scenario 1: Test if the StartGame method correctly sets the first player as the current player

Details:
TestName: TestStartGameSetsFirstPlayerAsCurrent
Description: This test will check if the StartGame method correctly sets the first player as the current player.

Execution:
Arrange: Instantiate a new GameState object.
Act: Invoke the StartGame method.
Assert: Assert that the current player is set as the first player.

Validation:
This assertion checks if the StartGame method correctly sets the first player as the current player. This is important because the first player should be the current player when a new game starts.

Scenario 2: Test if the StartGame method correctly resets the game board

Details:
TestName: TestStartGameResetsGameBoard
Description: This test will check if the StartGame method correctly resets the game board.

Execution:
Arrange: Instantiate a new GameState object and manually set some tiles on the game board.
Act: Invoke the StartGame method.
Assert: Assert that all tiles on the game board are reset to their initial state.

Validation:
This assertion checks if the StartGame method correctly resets the game board. This is crucial because the game board should be reset to its initial state when a new game starts.

Scenario 3: Test if the StartGame method correctly invokes the TilesReset event

Details:
TestName: TestStartGameInvokesTilesResetEvent
Description: This test will check if the StartGame method correctly invokes the TilesReset event.

Execution:
Arrange: Instantiate a new GameState object and subscribe to the TilesReset event.
Act: Invoke the StartGame method.
Assert: Assert that the TilesReset event was invoked.

Validation:
This assertion checks if the StartGame method correctly invokes the TilesReset event. This is significant because the TilesReset event should be invoked when a new game starts to notify subscribers that the game board has been reset.

Scenario 4: Test if the StartGame method correctly handles null TilesReset event

Details:
TestName: TestStartGameHandlesNullTilesResetEvent
Description: This test will check if the StartGame method correctly handles a null TilesReset event.

Execution:
Arrange: Instantiate a new GameState object without subscribing to the TilesReset event.
Act: Invoke the StartGame method.
Assert: Assert that no exception is thrown.

Validation:
This assertion checks if the StartGame method correctly handles a null TilesReset event. This is important because the StartGame method should not throw an exception when the TilesReset event is null.


*/

// ********RoostGPT********
using System;
using System.Linq;
using NUnit.Framework;
using Moq;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class StartGameTest
    {
        private Mock<GameBoard> _gameBoardMock;
        private Player _firstPlayer;
        private Player _secondPlayer;
        private GameState _gameState;

        [SetUp]
        public void Setup()
        {
            _gameBoardMock = new Mock<GameBoard>();
            _firstPlayer = new Player(1, "X");
            _secondPlayer = new Player(2, "O");
            
            _gameState = new GameState(new ButtonTileMapping[0])
            {
                gameBoard = _gameBoardMock.Object,
                firstPlayer = _firstPlayer,
                secondPlayer = _secondPlayer
            };
        }

        [Test, Category("valid")]
        public void TestStartGameSetsFirstPlayerAsCurrent()
        {
            _gameState.StartGame();
            
            Assert.AreEqual(_firstPlayer, _gameState.currentPlayer);
        }

        [Test, Category("valid")]
        public void TestStartGameResetsGameBoard()
        {
            _gameBoardMock.Setup(mock => mock.Reset()).Verifiable();

            _gameState.StartGame();

            _gameBoardMock.Verify(mock => mock.Reset(), Times.Once);
        }

        [Test, Category("valid")]
        public void TestStartGameInvokesTilesResetEvent()
        {
            var eventInvoked = false;
            _gameState.TilesReset += (sender, args) => eventInvoked = true;

            _gameState.StartGame();

            Assert.IsTrue(eventInvoked);
        }

        [Test, Category("valid")]
        public void TestStartGameHandlesNullTilesResetEvent()
        {
            _gameState.TilesReset = null;

            Assert.DoesNotThrow(() => _gameState.StartGame());
        }
    }
}
