// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=StartGame_ea5458875f
ROOST_METHOD_SIG_HASH=StartGame_941d5801f0

   ########## Test-Scenarios ##########  

Scenario 1: StartGame method successfully resets the game state

Details:
  TestName: StartGame_ResetsGame
  Description: This test checks whether the StartGame method resets the game state by setting the current player to the first player, resetting the game board, and invoking the TilesReset event.
  Execution:
    Arrange: Create an instance of the GameState class and set up the necessary dependencies.
    Act: Call the StartGame method.
    Assert: Verify that the current player is set to the first player, the game board is reset, and the TilesReset event is invoked.
  Validation:
    The assertion aims to verify that the StartGame method performs the necessary actions to reset the game state. This is important for starting a new game with a clean slate and ensuring that all game elements are properly initialized.

Scenario 2: StartGame method sets the current player to the first player

Details:
  TestName: StartGame_SetsCurrentPlayerToFirstPlayer
  Description: This test checks whether the StartGame method correctly sets the current player to the first player.
  Execution:
    Arrange: Create an instance of the GameState class and set up the necessary dependencies.
    Act: Call the StartGame method.
    Assert: Verify that the current player is set to the first player.
  Validation:
    The assertion aims to verify that the StartGame method correctly initializes the current player to the first player. This is important for determining the player who will make the first move in the game.

Scenario 3: StartGame method resets the game board

Details:
  TestName: StartGame_ResetsGameBoard
  Description: This test checks whether the StartGame method properly resets the game board.
  Execution:
    Arrange: Create an instance of the GameState class and set up the necessary dependencies.
    Act: Call the StartGame method.
    Assert: Verify that the game board is reset.
  Validation:
    The assertion aims to verify that the StartGame method resets the game board to its initial state. This is important for clearing any previous game state and ensuring a fresh start for the new game.

Scenario 4: StartGame method invokes the TilesReset event

Details:
  TestName: StartGame_InvokesTilesResetEvent
  Description: This test checks whether the StartGame method correctly invokes the TilesReset event.
  Execution:
    Arrange: Create an instance of the GameState class and set up the necessary dependencies.
    Act: Call the StartGame method.
    Assert: Verify that the TilesReset event is invoked.
  Validation:
    The assertion aims to verify that the StartGame method properly triggers the TilesReset event. This is important for notifying any subscribers to the event that the game board has been reset and they need to update their UI or perform any necessary actions.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;

namespace TicTacToe.Test
{
    [TestFixture]
    public class StartGameTest
    {
        private ButtonTileMapping[] buttonTileMappings;
        private GameState gameState;

        [SetUp]
        public void SetUp()
        {
            buttonTileMappings = new ButtonTileMapping[]
            {
                new ButtonTileMapping(new Button(), 0, 0),
                new ButtonTileMapping(new Button(), 1, 0),
                new ButtonTileMapping(new Button(), 2, 0),
                new ButtonTileMapping(new Button(), 0, 1),
                new ButtonTileMapping(new Button(), 1, 1),
                new ButtonTileMapping(new Button(), 2, 1),
                new ButtonTileMapping(new Button(), 0, 2),
                new ButtonTileMapping(new Button(), 1, 2),
                new ButtonTileMapping(new Button(), 2, 2),
            };

            gameState = new GameState(buttonTileMappings);
        }

        [Test]
        [Category("valid")]
        public void StartGame_ResetsGame()
        {
            // Arrange
            bool currentPlayerReset = false;
            bool gameBoardReset = false;
            bool tilesResetEventInvoked = false;

            gameState.TilesReset += (sender, args) =>
            {
                tilesResetEventInvoked = true;
            };

            // Act
            gameState.StartGame();

            // Assert
            Assert.AreEqual(gameState.FirstPlayer, gameState.CurrentPlayer);
            Assert.IsTrue(gameState.GameBoard.IsEmpty());
            Assert.IsTrue(tilesResetEventInvoked);
        }

        [Test]
        [Category("valid")]
        public void StartGame_SetsCurrentPlayerToFirstPlayer()
        {
            // Arrange
            gameState.StartGame();

            // Act
            gameState.StartGame();

            // Assert
            Assert.AreEqual(gameState.FirstPlayer, gameState.CurrentPlayer);
        }

        [Test]
        [Category("valid")]
        public void StartGame_ResetsGameBoard()
        {
            // Arrange
            gameState.StartGame();

            // Act
            gameState.StartGame();

            // Assert
            Assert.IsTrue(gameState.GameBoard.IsEmpty());
        }

        [Test]
        [Category("valid")]
        public void StartGame_InvokesTilesResetEvent()
        {
            // Arrange
            bool tilesResetEventInvoked = false;

            gameState.TilesReset += (sender, args) =>
            {
                tilesResetEventInvoked = true;
            };

            // Act
            gameState.StartGame();

            // Assert
            Assert.IsTrue(tilesResetEventInvoked);
        }
    }
}
