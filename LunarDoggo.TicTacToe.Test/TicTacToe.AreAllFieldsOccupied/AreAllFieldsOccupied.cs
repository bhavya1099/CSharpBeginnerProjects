// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=AreAllFieldsOccupied_01adc85aeb
ROOST_METHOD_SIG_HASH=AreAllFieldsOccupied_be4cd9d72c

   ########## Test-Scenarios ##########  

Scenario 1: Test to check if all fields are occupied when no field is occupied

Details:
  TestName: TestAllFieldsOccupiedWithNoFieldOccupied
  Description: The test is meant to check if the function correctly identifies when no fields on the game board are occupied.
Execution:
  Arrange: Set up the game board with no occupied fields.
  Act: Invoke the AreAllFieldsOccupied method.
  Assert: Assert that the returned value is false.
Validation:
  The assertion aims to verify that the function correctly identifies that not all fields are occupied. This is significant in the context of the game as the game should still be playable if there are unoccupied fields.

Scenario 2: Test to check if all fields are occupied when all fields are occupied

Details:
  TestName: TestAllFieldsOccupiedWithAllFieldsOccupied
  Description: The test is meant to check if the function correctly identifies when all fields on the game board are occupied.
Execution:
  Arrange: Set up the game board with all fields occupied.
  Act: Invoke the AreAllFieldsOccupied method.
  Assert: Assert that the returned value is true.
Validation:
  The assertion aims to verify that the function correctly identifies that all fields are occupied. This is significant in the context of the game as the game should end if there are no unoccupied fields.

Scenario 3: Test to check if all fields are occupied when only some fields are occupied

Details:
  TestName: TestAllFieldsOccupiedWithSomeFieldsOccupied
  Description: The test is meant to check if the function correctly identifies when only some fields on the game board are occupied.
Execution:
  Arrange: Set up the game board with some fields occupied.
  Act: Invoke the AreAllFieldsOccupied method.
  Assert: Assert that the returned value is false.
Validation:
  The assertion aims to verify that the function correctly identifies that not all fields are occupied. This is significant in the context of the game as the game should still be playable if there are unoccupied fields.

Scenario 4: Test to check the functionality of the method when the game board is reset

Details:
  TestName: TestAllFieldsOccupiedAfterReset
  Description: The test is meant to check if the function correctly identifies that no fields are occupied after the game board has been reset.
Execution:
  Arrange: Set up the game board with all fields occupied. Then reset the game board.
  Act: Invoke the AreAllFieldsOccupied method.
  Assert: Assert that the returned value is false.
Validation:
  The assertion aims to verify that the function correctly identifies that no fields are occupied after the game board has been reset. This is significant in the context of the game as the game should be resettable, allowing for multiple games to be played.


*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class AreAllFieldsOccupiedTest
    {
        [Test, Category("valid")]
        public void TestAllFieldsOccupiedWithNoFieldOccupied()
        {
            // Arrange
            var gameBoard = new GameBoard();

            // Act
            var result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result, "Expected AreAllFieldsOccupied to return false when no fields are occupied");
        }

        [Test, Category("valid")]
        public void TestAllFieldsOccupiedWithAllFieldsOccupied()
        {
            // Arrange
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    gameBoard.OccupyTile(player, x, y);
                }
            }

            // Act
            var result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsTrue(result, "Expected AreAllFieldsOccupied to return true when all fields are occupied");
        }

        [Test, Category("valid")]
        public void TestAllFieldsOccupiedWithSomeFieldsOccupied()
        {
            // Arrange
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");
            gameBoard.OccupyTile(player, 0, 0);

            // Act
            var result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result, "Expected AreAllFieldsOccupied to return false when only some fields are occupied");
        }

        [Test, Category("valid")]
        public void TestAllFieldsOccupiedAfterReset()
        {
            // Arrange
            var gameBoard = new GameBoard();
            var player = new Player(1, "X");
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    gameBoard.OccupyTile(player, x, y);
                }
            }
            gameBoard.Reset();

            // Act
            var result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result, "Expected AreAllFieldsOccupied to return false after the game board has been reset");
        }
    }
}
