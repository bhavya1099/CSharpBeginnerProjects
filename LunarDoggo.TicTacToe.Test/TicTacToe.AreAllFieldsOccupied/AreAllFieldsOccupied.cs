// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=AreAllFieldsOccupied_01adc85aeb
ROOST_METHOD_SIG_HASH=AreAllFieldsOccupied_be4cd9d72c

   ########## Test-Scenarios ##########  


Scenario 1: Testing AreAllFieldsOccupied when all fields are occupied
Details:
  TestName: TestAreAllFieldsOccupiedWhenAllFieldsAreOccupied
  Description: Verify that the method returns true when all fields on the game board are occupied by players.
  Execution:
    Arrange: Set up a game board where all fields are occupied by players.
    Act: Call the AreAllFieldsOccupied method.
    Assert: Ensure that the method returns true.
  Validation:
    The test aims to verify that the method correctly identifies when all fields are occupied, which is a critical condition for determining the end of a game.

Scenario 2: Testing AreAllFieldsOccupied when no fields are occupied
Details:
  TestName: TestAreAllFieldsOccupiedWhenNoFieldsAreOccupied
  Description: Check that the method returns false when no fields on the game board are occupied.
  Execution:
    Arrange: Set up a game board with no occupied fields.
    Act: Invoke the AreAllFieldsOccupied method.
    Assert: Validate that the method returns false.
  Validation:
    The test ensures that the method behaves correctly when none of the fields are occupied, indicating that the game is still ongoing.

Scenario 3: Testing AreAllFieldsOccupied with a partially occupied board
Details:
  TestName: TestAreAllFieldsOccupiedWithPartiallyOccupiedBoard
  Description: Validate the method's behavior when the game board is partially occupied by players.
  Execution:
    Arrange: Set up a game board with some fields occupied.
    Act: Execute the AreAllFieldsOccupied method.
    Assert: Check that the method returns false.
  Validation:
    This test scenario confirms that the method correctly identifies an incomplete game state where not all fields are occupied.

Scenario 4: Testing AreAllFieldsOccupied with alternating occupied and empty fields
Details:
  TestName: TestAreAllFieldsOccupiedWithAlternatingOccupiedAndEmptyFields
  Description: Verify the method's response when fields on the game board are alternately occupied and empty.
  Execution:
    Arrange: Create a game board with alternating occupied and empty fields.
    Act: Call the AreAllFieldsOccupied method.
    Assert: Confirm that the method returns false.
  Validation:
    This scenario ensures that the method works as expected by detecting incomplete game states where some fields are empty.

Scenario 5: Testing AreAllFieldsOccupied for an edge case with a 1x1 game board
Details:
  TestName: TestAreAllFieldsOccupiedForOneByOneGameBoard
  Description: Test the method's behavior when the game board has only one field.
  Execution:
    Arrange: Prepare a 1x1 game board with a player occupying the only field.
    Act: Invoke the AreAllFieldsOccupied method.
    Assert: Validate that the method returns true.
  Validation:
    This test scenario covers an edge case to ensure that the method handles a minimal game board size correctly.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;

namespace TicTacToe.Test
{
    [TestFixture]
    public class AreAllFieldsOccupiedTest
    {
        private GameBoard gameBoard;

        [SetUp]
        public void Setup()
        {
            gameBoard = new GameBoard();
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupiedWhenAllFieldsAreOccupied()
        {
            // Arrange
            for (int x = 0; x < gameBoard.tiles.GetLength(0); x++)
            {
                for (int y = 0; y < gameBoard.tiles.GetLength(1); y++)
                {
                    gameBoard.OccupyTile(new Player(1, "X"), x, y);
                }

            }

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupiedWhenNoFieldsAreOccupied()
        {
            // Arrange - No tiles occupied

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupiedWithPartiallyOccupiedBoard()
        {
            // Arrange - Occupy some fields
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 1);

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupiedWithAlternatingOccupiedAndEmptyFields()
        {
            // Arrange - Occupying alternating fields
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 0, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 1, 0);

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupiedForOneByOneGameBoard()
        {
            // Arrange - Occupy the only available field
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsTrue(result);
        }
    }
}
