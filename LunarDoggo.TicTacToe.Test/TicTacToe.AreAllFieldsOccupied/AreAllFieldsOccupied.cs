// ********RoostGPT********
/*
Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 

ROOST_METHOD_HASH=AreAllFieldsOccupied_01adc85aeb
ROOST_METHOD_SIG_HASH=AreAllFieldsOccupied_be4cd9d72c

   ########## Test-Scenarios ##########  

Scenario 1: All fields are occupied
Details:
  TestName: TestAreAllFieldsOccupied_AllFieldsOccupied
  Description: This test is meant to check if the method correctly returns true when all fields in the game board are occupied by players.
Execution:
  Arrange: Set up a game board with all fields occupied by players.
  Act: Call the AreAllFieldsOccupied() method.
  Assert: Verify that the method returns true.
Validation:
  The assertion aims to verify that the method correctly checks if all fields in the game board are occupied. This test is significant in ensuring that the game board is correctly detecting when all fields are occupied, which can be used to determine if the game is a draw.

Scenario 2: Some fields are occupied
Details:
  TestName: TestAreAllFieldsOccupied_SomeFieldsOccupied
  Description: This test is meant to check if the method correctly returns false when some fields in the game board are occupied by players.
Execution:
  Arrange: Set up a game board with some fields occupied by players.
  Act: Call the AreAllFieldsOccupied() method.
  Assert: Verify that the method returns false.
Validation:
  The assertion aims to verify that the method correctly checks if some fields in the game board are occupied. This test is significant in ensuring that the game board is correctly detecting when not all fields are occupied, which can be used to continue the game.

Scenario 3: No fields are occupied
Details:
  TestName: TestAreAllFieldsOccupied_NoFieldsOccupied
  Description: This test is meant to check if the method correctly returns false when no fields in the game board are occupied by players.
Execution:
  Arrange: Set up a game board with no fields occupied by players.
  Act: Call the AreAllFieldsOccupied() method.
  Assert: Verify that the method returns false.
Validation:
  The assertion aims to verify that the method correctly checks if no fields in the game board are occupied. This test is significant in ensuring that the game board is correctly detecting when no fields are occupied, which can be used to determine if the game is still ongoing.

Scenario 4: Game board is empty
Details:
  TestName: TestAreAllFieldsOccupied_EmptyGameBoard
  Description: This test is meant to check if the method correctly returns false when the game board is empty.
Execution:
  Arrange: Set up an empty game board.
  Act: Call the AreAllFieldsOccupied() method.
  Assert: Verify that the method returns false.
Validation:
  The assertion aims to verify that the method correctly checks if the game board is empty. This test is significant in ensuring that the game board is correctly detecting when no fields are occupied, even when the game board is empty.

Scenario 5: Game board is null
Details:
  TestName: TestAreAllFieldsOccupied_NullGameBoard
  Description: This test is meant to check if the method handles the case when the game board is null.
Execution:
  Arrange: Set up a null game board.
  Act: Call the AreAllFieldsOccupied() method.
  Assert: Verify that the method returns false.
Validation:
  The assertion aims to verify that the method handles the case when the game board is null and returns false. This test is significant in ensuring that the method has proper error handling for null game boards.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;

namespace TicTacToe.Test
{
    [TestFixture]
    public class AreAllFieldsOccupiedTest
    {
        private GameBoard gameBoard;

        [SetUp]
        public void Setup()
        {
            gameBoard = new GameBoard();
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupied_AllFieldsOccupied()
        {
            // Arrange
            for (int x = 0; x < 3; x++)
            {
                for (int y = 0; y < 3; y++)
                {
                    gameBoard.OccupyTile(new Player(1, "X"), x, y);
                }
            }

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsTrue(result);
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupied_SomeFieldsOccupied()
        {
            // Arrange
            gameBoard.OccupyTile(new Player(1, "X"), 0, 0);
            gameBoard.OccupyTile(new Player(2, "O"), 1, 1);
            gameBoard.OccupyTile(new Player(1, "X"), 2, 2);

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupied_NoFieldsOccupied()
        {
            // Arrange

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupied_EmptyGameBoard()
        {
            // Arrange

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }

        [Test]
        [Category("valid")]
        public void TestAreAllFieldsOccupied_NullGameBoard()
        {
            // Arrange
            gameBoard = null;

            // Act
            bool result = gameBoard.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }
    }
}
