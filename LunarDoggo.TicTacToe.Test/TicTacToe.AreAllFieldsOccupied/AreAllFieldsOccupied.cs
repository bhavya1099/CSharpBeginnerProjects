// ********RoostGPT********
/*
Test generated by RoostGPT for test csharp-test using AI Type  and AI Model 

ROOST_METHOD_HASH=AreAllFieldsOccupied_01adc85aeb
ROOST_METHOD_SIG_HASH=AreAllFieldsOccupied_be4cd9d72c

   ########## Test-Scenarios ##########  

Scenario 1: Test to check if all fields are occupied when no field is occupied

Details:
  TestName: TestAllFieldsOccupiedWithNoFieldOccupied
  Description: The test is meant to check if the function correctly identifies when no fields on the game board are occupied.
Execution:
  Arrange: Set up the game board with no occupied fields.
  Act: Invoke the AreAllFieldsOccupied method.
  Assert: Use NUnit assertion to check if the function returns false.
Validation:
  The assertion aims to verify that the function correctly identifies a board with no occupied fields. The expected result is false as no fields are occupied.

Scenario 2: Test to check if all fields are occupied when only one field is occupied

Details:
  TestName: TestAllFieldsOccupiedWithOneFieldOccupied
  Description: The test is meant to check if the function correctly identifies when only one field on the game board is occupied.
Execution:
  Arrange: Set up the game board with one occupied field.
  Act: Invoke the AreAllFieldsOccupied method.
  Assert: Use NUnit assertion to check if the function returns false.
Validation:
  The assertion aims to verify that the function correctly identifies a board with only one occupied field. The expected result is false as not all fields are occupied.

Scenario 3: Test to check if all fields are occupied when all fields are occupied

Details:
  TestName: TestAllFieldsOccupiedWithAllFieldsOccupied
  Description: The test is meant to check if the function correctly identifies when all fields on the game board are occupied.
Execution:
  Arrange: Set up the game board with all fields occupied.
  Act: Invoke the AreAllFieldsOccupied method.
  Assert: Use NUnit assertion to check if the function returns true.
Validation:
  The assertion aims to verify that the function correctly identifies a board with all fields occupied. The expected result is true as all fields are occupied.

Scenario 4: Test to check if all fields are occupied when half of the fields are occupied

Details:
  TestName: TestAllFieldsOccupiedWithHalfFieldsOccupied
  Description: The test is meant to check if the function correctly identifies when half of the fields on the game board are occupied.
Execution:
  Arrange: Set up the game board with half of the fields occupied.
  Act: Invoke the AreAllFieldsOccupied method.
  Assert: Use NUnit assertion to check if the function returns false.
Validation:
  The assertion aims to verify that the function correctly identifies a board with half of the fields occupied. The expected result is false as not all fields are occupied.


*/

// ********RoostGPT********
using NUnit.Framework;
using Moq;
using System;

namespace TicTacToe.Test
{
    public class AreAllFieldsOccupiedTest
    {
        private Mock<GameBoard> _gameBoard;

        [SetUp]
        public void Setup()
        {
            _gameBoard = new Mock<GameBoard>();
        }


        [Test, Category('valid')]
        public void TestAllFieldsOccupiedWithNoFieldOccupied()
        {
            // Arrange
            _gameBoard.Setup(g => g.AreAllFieldsOccupied()).Returns(false);

            // Act
            var result = _gameBoard.Object.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }

        [Test, Category('valid')]
        public void TestAllFieldsOccupiedWithOneFieldOccupied()
        {
            // Arrange
            _gameBoard.Setup(g => g.AreAllFieldsOccupied()).Returns(false);

            // Act
            var result = _gameBoard.Object.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }

        [Test, Category('valid')]
        public void TestAllFieldsOccupiedWithAllFieldsOccupied()
        {
            // Arrange
            _gameBoard.Setup(g => g.AreAllFieldsOccupied()).Returns(true);

            // Act
            var result = _gameBoard.Object.AreAllFieldsOccupied();

            // Assert
            Assert.IsTrue(result);
        }

        [Test, Category('valid')]
        public void TestAllFieldsOccupiedWithHalfFieldsOccupied()
        {
            // Arrange
            _gameBoard.Setup(g => g.AreAllFieldsOccupied()).Returns(false);

            // Act
            var result = _gameBoard.Object.AreAllFieldsOccupied();

            // Assert
            Assert.IsFalse(result);
        }
    }
}
